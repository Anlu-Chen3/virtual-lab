[
    {
        "agent": "User",
        "message": "This is the beginning of an individual meeting with Medicinal Chemist to discuss your research project.\n\nHere is context for this meeting:\n\n[begin context 1]\n\nExperimentHPLC[Samples]\u27f9Protocol\n\ngenerates a Protocol to separate Samples via high-pressure liquid chromatography (HPLC).\n\n\n\nHigh-performance liquid chromatography (HPLC) involves an aqueous and/or organic mobile phase, into which, samples are injected and flowed through the stationary phase column. Analytes pass over resin within the column and selectively adsorb based on their relative affinity, leading to differential retention of unique analyte molecules. Molecules are carried downstream for chemical property analysis and optional collection. On the whole, molecular components are separated into analyzable, collectable constituents. For instance, synthesized DNA can be purified based on the total ionic charge of each unique strand.\n\n\n\nExperimental Principles\n\nFigure 1.1: Procedural overview of a HPLC experiment. Step 1: If ConductivityCalibration -> True, the conductance probe is calibrated and the conductance flow cell is rinsed with cleaning solutions. Step 2: If pHCalibration -> True, the pH probe is calibrated and the pH flow cell is rinsed with cleaning solutions. Step 3: During the system prime, the system is rinsed with cleaning solutions. Step 4: The stationary Column is installed and equilibrated to measurement conditions. Step 5: Samples are then introduced into the flow path. Step 6: The analytes are selectively retained on the downstream Column. Step 7: Upon exit from the column, the now separated analytes are analyzed according to their physical property. Step 8: Based on the property measurement and specifications, analytes are saved in output containers, if CollectFractions ->True. Step 9: After final sample measurement, the Column is rinsed, removed from the system, and stowed. Step 10: After the column is removed the system is rinsed with cleaning solution.\n\n\n\nInstrumentation\n\nWaters Acquity UPLC H-Class PDA\n\nModel[Instrument, HPLC, \"id:Z1lqpMGJmR0O\"]\n\nFigure 2.1.1: Instrument diagram for the H-Class and I-Class systems. Buffer solutions (up to 4) are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals.\n\nFigure 2.1.2: Principle of PhotodiodeArray detection. Filtered light (across a range of wavelengths) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak for each specific wavelength.\n\nWaters Acquity UPLC H-Class FLR\n\nModel[Instrument, HPLC, \"id:1ZA60vw8X5eD\"]\n\nFigure 2.2.1: Instrument diagram for the H-Class and I-Class systems. Buffer solutions (up to 4) are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals.\n\nFigure 2.2.2: Principle of Ultraviolet absorbance detection. Filtered light (with a set wavelength) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak.\n\nFigure 2.2.3: Principle of Fluorescence detection. Filtered light (with a set wavelength) is used to excite the flow downstream of the column. The resulting light is filtered and measured with a photo-multiplier tube.\n\nWaters Acquity UPLC H-Class ELS with Pre-Column Heater\n\nModel[Instrument, HPLC, \"id:dORYzZn6p31E\"]\n\nFigure 2.3.1: Instrument diagram for the H-Class and I-Class systems. Buffer solutions (up to 4) are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals.\n\nFigure 2.3.2: Principle of Ultraviolet absorbance detection. Filtered light (with a set wavelength) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak.\n\nFigure 2.3.3: Principle of Evaporative Light Scattering detection. The column effluent is nebulized -- formed into droplets through flowing nitrogen sheath gas and surrounding heat. Incident light is scattered based on the size of the droplets, where the size is a function of analyte concentration within. The resulting scattering is measured with a photo-multiplier tube.\n\nWaters Acquity UPLC I-Class PDA\n\nModel[Instrument, HPLC, \"id:4pO6dM5lRrl7\"]\n\nFigure 2.4.1: Instrument diagram for the H-Class and I-Class systems. Buffer solutions (up to 4) are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals.\n\nFigure 2.4.2: Principle of PhotodiodeArray detection. Filtered light (across a range of wavelengths) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak for each specific wavelength.\n\nUltiMate 3000\n\nModel[Instrument, HPLC, \"id:N80DNjlYwwJq\"]\n\nFigure 2.5.1: Instrument diagram for the Ultimate 3000 system. Buffer solutions are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals. Separated analytes can be collected based on the properties of these resulting peaks.\n\nFigure 2.5.2: Principle of Ultraviolet absorbance detection. Filtered light (with a set wavelength) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak.\n\nUltiMate 3000 with FLR Detector\n\nModel[Instrument, HPLC, \"id:wqW9BP7BzwAG\"]\n\nFigure 2.6.1: Instrument diagram for the Ultimate 3000 system. Buffer solutions are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals. Separated analytes can be collected based on the properties of these resulting peaks.\n\nFigure 2.6.2: Principle of Ultraviolet absorbance detection. Filtered light (with a set wavelength) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak.\n\nFigure 2.6.3: Principle of Fluorescence detection. The light beam from the Xenon lamp focused by the lens transmits through the excitation monochromator. The light of the user-selected wavelength is used to excite the flow downstream of the column. The excitation light stimulates the sample to emit fluorescence light. After it is focused by the lens, the emission light is filtered with an emission monochromator to select the light of the user-selected wavelength. A cut-off filter, which lets only light above a certain wavelength pass, is located before the emission monochromator to achieve even better sensitivity. Finally, the filtered emission light is measured with a double-photomultiplier tube (PMT) system to cover the full spectra range from ultraviolet to near-infrared region (220 \u2013 900 nm).\n\nUltiMate 3000 with MALS-DLS-RI Detector\n\nModel[Instrument, HPLC, \"id:M8n3rx098xbO\"]\n\nFigure 2.7.1: Instrument diagram for the Ultimate 3000 system. Buffer solutions are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals. Separated analytes can be collected based on the properties of these resulting peaks.\n\nFigure 2.7.2: Principle of Ultraviolet absorbance detection. Filtered light (with a set wavelength) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak.\n\nFigure 2.7.3: Principle of Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) detection. The flow downstream of the column passes through the MALS detector, which is equipped with the DLS detection module. 658 nm laser light is scattered by the nanoparticles or biomacromolecules in the sample inside the flow cell. The intensities of the scattered light beams at different directions are measured by 17 MALS photodiode detectors. Meanwhile, the fluctuation of the scattered light beam is measured by 1 DLS photodiode detector. The DLS photodiode detector has smaller surface area than the MALS photodiode detector to allow accurate measurement of light intensity fluctuation. With the concentration information of the sample, the results from MALS and DLS detection can provide analysis of molar mass, radius of gyration and hydrodynamic radius for copolymers and protein conjugates (glycoproteins, PEGylated proteins, surfactant-bound membrane proteins, etc).\n\nFigure 2.7.4: Principle of refractive index (RI) detection.There are two flow cells inside the RI detector: sample flow cell and reference flow cell.When the reference loading valves are open, the flow downstream of the column is loaded into the two flow cells simultaneously. When the valves are closed,only the sample flow cell is loaded while the reference flow remains stable.The light source of 600 nm passes through the sample flow cell and then the reference flow cell and the refracted light is measured by a photodiode.Under RefractiveIndex mode,the valves are kept open and both flow cells are loaded with the sample.The displacement of the light beam is measured and used to determine the absolute refractive index of the sample. Under DifferentialRefractiveIndex mode,the reference cell is loaded with the desired solvent at the beginning of the experiment and then the valves are closed.The shift of light beam direction is measured and used to determine the differential refractive index of the sample and the solvent.\n\nUltiMate 3000 with PCM Detector\n\nModel[Instrument, HPLC, \"id:P5ZnEjdExnnn\"]\n\nFigure 2.8.1: Instrument diagram for the Ultimate 3000 system. Buffer solutions are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals. Separated analytes can be collected based on the properties of these resulting peaks.\n\nFigure 2.8.2: Principle of Ultraviolet absorbance detection. Filtered light (with a set wavelength) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak.\n\nFigure 2.8.3: Principle of pH and conductivity detection. The flow downstream of the column passes through the conductivity flow cell and the pH flow cell sequentially. Conductivity is monitored with the resulting amperometric signals while alternating voltage is applied on the conductivity probe. pH is measured by the generated voltage between the working electrode and the reference electrode, which is directly proportional to the pH of the solution in the pH flow cell. Temperature sensors are presented in both flow cells to achieve automatic temperature compensation in the pH and conductivity calculation.\n\nAgilent 1290 Infinity II LC System\n\nModel[Instrument, HPLC, \"id:R8e1Pjp1md8p\"]\n\nFigure 2.9.1: Instrument diagram for the Agilent 1290 Infinity system. Buffer solutions are steadily pumped through the instrument, consisting of a 6-port valve system, adsorbent column, detectors, and terminates at fraction collection or waste. Samples within the autosampler are loaded into the sample loop via positive displacement from the syringe. The rotation of the valve exposes the sample loop, thereby carrying the sample downstream to the column. Within the column, molecular constituents are separated by adsorption -- a function of the buffers, column, sample properties and temperature. Analytes are continuously carried downstream to the detectors, where they can elicit quantifiable peak signals. Separated analytes can be collected based on the properties of these resulting peaks.\n\nFigure 2.9.2: Agilent 1290 Infinity plumbing diagram. The solvent flow from each pump head is merged at a t-piece in pairs. Solvents A/C share the same flow path from here on as well as B/D. Joint flow from from each pump pair then travels through a pressure sensor and a purge valve before it is combined at the manifold where it then moves on to the mixer and an autosampler. This configuration does not allow for having a gradient of A/C or B/D and only mixes between the two sides are possible.\n\nFigure 2.9.3: Principle of PhotodiodeArray detection. Filtered light (across a range of wavelengths) passes through the flow downstream of the column. Presence of light-absorbing molecules will result in less light transmission to the recipient Diode, thereby producing a chromatographic peak for each specific wavelength.\n\n\n\nExperiment Options\n\nGeneral\n\nInstrument\n\nA list of one or more measurement and collection devices to run the experiment on and that satisfy the Scale and Detector options.\n\nDefault Value: Automatic\n\nDefault Calculation: For FractionCollection option specification and/or for Scale->Preparative or SemiPreparative, automatically set to instrument models that have fraction collection capabilities. Otherwise, automatically set to instrument models that meet the requested Detector.\n\nPattern Description: An object of type or subtype Model[Instrument, HPLC] or Object[Instrument, HPLC] or list of one or more an object of type or subtype Model[Instrument, HPLC] entries or Null.\n\nProgrammatic Pattern: ((ObjectP[{Model[Instrument, HPLC], Object[Instrument, HPLC]}] | {ObjectP[Model[Instrument, HPLC]]..}) | Automatic) | Null\n\nScale\n\nThe output of the experiment. Preparative and SemiPreparative indicates that effluent is to be collected by fractions. Analytical indicates that specific measurements will be employed and new SamplesOut will not be generated (e.g the absorbance of the flow with injected sample for a given wavelength).\n\nDefault Value: Automatic\n\nDefault Calculation: If any fraction collection options are specified and injection volume is greater that 500 uL, then Scale -> Preparative; if fraction collection options are specified and injection volume is less than or equal to 500uL, then Scale -> SemiPreparative; otherwise, Scale -> Analytical.\n\nPattern Description: Preparative, Analytical, or SemiPreparative.\n\nProgrammatic Pattern: PurificationScaleP | Automatic\n\nSeparationMode\n\nThe category of method used to elicit differential column retention due to interaction between molecules in the mobile phase with those on the stationary phase (column).\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to match the Separation Mode listed with the provided column.\n\nPattern Description: NormalPhase, ReversePhase, IonExchange, SizeExclusion, Affinity, or Chiral.\n\nProgrammatic Pattern: SeparationModeP | Automatic\n\nDetector\n\nThe type of measurement to employ. Options include Pressure (measures the pump pressure) , Temperature (measures the temperature of the column oven), UVVis (measures the absorbance of a single wavelength of light), PhotoDiodeArray (measures the absorbance of a range of wavelengths), Fluorescence (measures the emitted light from samples after light excitation),pH, Conductance, MultiAngleLightScattering (measures the scattered light intensity at different angles), DynamicLightScattering (measures the scattered light fluctuation), RefractiveIndex (measures how fast light travels through the sample) and EvaporativeLightScattering (separates the flow into airborne droplets and measures the light scattering).\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the detector(s) available for the first selected instrument. For example, if Agilent 1290 Infinity II Instrument is requested, the Detector option will include Pressure and PhotoDiodeArray.\n\nPattern Description: A selection of one or more of Pressure, Temperature, Conductance, Fluorescence, EvaporativeLightScattering, UVVis, PhotoDiodeArray, CircularDichroism, RefractiveIndex, pH, MultiAngleLightScattering, or DynamicLightScattering.\n\nProgrammatic Pattern: DuplicateFreeListableP[Pressure | Temperature | Conductance | Fluorescence | EvaporativeLightScattering | UVVis | PhotoDiodeArray | CircularDichroism | RefractiveIndex | pH | MultiAngleLightScattering | DynamicLightScattering] | Automatic\n\nColumnSelection\n\nIndicates if multiple different columns will be employed for different samples during the run. All columns are installed during the beginning of the run and the valve on the instrument allows to switch between them automatically.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnSelector and InjectionTable are not specified, automatically set to False. If InjectionTable is set but with only one set of column(s), automatically set to False. Otherwise, set to True.\n\nPattern Description: True or False.\n\nProgrammatic Pattern: BooleanP | Automatic\n\nColumnPosition\n\nThe position of the column selector valve and the desired column configuration that will be used for each sample as it is injected.\n\nDefault Value: Automatic\n\nDefault Calculation: If InjectionTable is specified, automatically set from the Column Position entry for the sample. Otherwise set to PositionA.\n\nPattern Description: PositionA, PositionB, PositionC, PositionD, PositionE, PositionF, PositionG, or PositionH.\n\nProgrammatic Pattern: ColumnPositionP | Automatic\n\nIndex Matches to: experiment samples\n\nGuardColumn\n\nThe protective device placed in the flow path before the Column in order to adsorb fouling contaminants and, thus, preserve the Column lifetime.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set from the column model's PreferredGuardColumn. If Column is Null, GuardColumn is automatically set to Null.\n\nPattern Description: An object of type or subtype Model[Item, Column], Object[Item, Column], Model[Item, Cartridge, Column], or Object[Item, Cartridge, Column] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Item, Column], Object[Item, Column], Model[Item, Cartridge, Column], Object[Item, Cartridge, Column]}] | Automatic) | Null\n\nGuardColumnOrientation\n\nThe position of the GuardColumn with respect to the Column, SecondaryColumn and TertiaryColumn. Forward indicates that the GuardColumn will be placed in front of the Column, SecondaryColumn and TertiaryColumn. If a Column is specified and GuardColumnOrientation is Reverse, the GuardColumn will be placed after the Column, SecondaryColumn, and/or TertiaryColumn in the flow path which is typically performed during column cleaning.\n\nDefault Value: Automatic\n\nDefault Calculation: If GuardColumn is specified automatically set to Forward.\n\nPattern Description: Forward or Reverse or Null.\n\nProgrammatic Pattern: (ColumnOrientationP | Automatic) | Null\n\nColumn\n\nThe item containing the stationary phase through which the mobile phase and input samples flow. It adsorbs and separates the molecules within the sample based on the properties of the mobile phase, Samples, Column material, and the desired column temperature in the specified InjectionTable.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to a column model compatible for the instrument selected and specified separation Mode.\n\nPattern Description: An object of type or subtype Model[Item, Column] or Object[Item, Column] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Item, Column], Object[Item, Column]}] | Automatic) | Null\n\nColumnOrientation\n\nThe direction of the Column with respect to the flow. Forward indicates that the Column will be placed in the direction indicated by the column manufacturer for standard operation. Reverse indicates that the Column will be placed in the opposite direction indicated by the column manufacturer for standard operation. This also specifies the orientation of secondary and tertiary columns if provided.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to Forward if column orientation options are not specified.\n\nPattern Description: Forward or Reverse or Null.\n\nProgrammatic Pattern: (ColumnOrientationP | Automatic) | Null\n\nSecondaryColumn\n\nThe additional stationary phase through which the mobile phase and input samples flow. The SecondaryColumn selectively adsorb analytes and is connected to flow path, downstream of the Column.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnSelector is specified, set from there; otherwise, set to Null.\n\nPattern Description: An object of type or subtype Model[Item, Column] or Object[Item, Column] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Item, Column], Object[Item, Column]}] | Automatic) | Null\n\nTertiaryColumn\n\nThe additional stationary phase through which the mobile phase and input samples flow. The TertiaryColumn selectively adsorb analytes and is connected to flow path, downstream of the SecondaryColumn.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnSelector is specified, set from there; otherwise, set to Null.\n\nPattern Description: An object of type or subtype Model[Item, Column] or Object[Item, Column] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Item, Column], Object[Item, Column]}] | Automatic) | Null\n\nIncubateColumn\n\nIndicates if the columns are placed inside the column oven compartment of the HPLC instrument during the experiment. If set to False, the columns are placed on a rack outside the column oven under ambient temperature.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to False if the selected connection of GuardColumn, Column, SecondaryColumn, and TertiaryColumn cannot fit into the column oven compartment of the Instrument. Otherwise set to True.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nBufferA\n\nA solvent or buffer placed in the 'A' bottle as shown in Figure 2.1.1 - 2.9.1 of ExperimentHPLC help file, pumped through the instrument as part of the mobile phase, the compositions of which is determined by the GradientA option.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set from the SeparationMode (e.g. Water buffer if ReversePhase) option or the objects specified in the Gradient option.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample.\n\nProgrammatic Pattern: (ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic\n\nBufferB\n\nA solvent or buffer placed in the 'B' bottle as shown in Figure 2.1.1 - 2.9.1 of ExperimentHPLC help file, pumped through the instrument as part of the mobile phase, the compositions of which is determined by the GradientB option.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set from SeparationMode (e.g. Acetonitrile buffer if ReversePhase) or the objects specified by the Gradient option.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample.\n\nProgrammatic Pattern: (ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic\n\nBufferC\n\nA solvent or buffer placed in the 'C' bottle as shown in Figure 2.1.1 - 2.9.1 of ExperimentHPLC help file, pumped through the instrument as part of the mobile phase, the compositions of which is determined by the GradientC option.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set from the SeparationMode option or the objects specified in the Gradient option.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic) | Null\n\nBufferD\n\nA solvent or buffer placed in the 'D' bottle as shown in Figure 2.1.1 - 2.5.1 of ExperimentHPLC help file, pumped through the instrument as part of the mobile phase, the compositions of which is determined by the GradientD option.\n\nDefault Value: Automatic\n\nDefault Calculation: If the specified Instrument's pump does not support Buffer D, automatically set to Null. Otherwise, set from the SeparationMode option or the objects specified in the Gradient option.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic) | Null\n\nColumn Installation\n\nColumnSelector\n\nThe set of all the columns loaded into the Instrument's column selector and referenced in Column, SecondaryColumn, TertiaryColumn. The Serial configuration indicates one fluid line for all the samples, Standard and Blank. The Selector configuration indicates use of a column selector where the column line is programmatically switchable between samples.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnSelection is False, set to match the values in Column, SecondaryColumn, TertiaryColumn, ColumnOrientation, GuardColumn and GuardColumnOrientation options.\n\nPattern Description: {Column Position, Guard Column, Guard Column Orientation, Column, Column Orientation, Secondary Column, Tertiary Column}\n\nProgrammatic Pattern: {ColumnPositionP | Automatic | Null, ObjectP[{Model[Item, Column], Object[Item, Column]}] | (Automatic | Null), ColumnOrientationP | (Automatic | Null), ObjectP[{Model[Item, Column], Object[Item, Column]}] | (Automatic | Null), ColumnOrientationP | (Automatic | Null), ObjectP[{Model[Item, Column], Object[Item, Column]}] | (Automatic | Null), ObjectP[{Model[Item, Column], Object[Item, Column]}] | (Automatic | Null)} | Automatic\n\nIndex Matches to: ColumnSelector\n\nSeparation\n\nColumnStorageBuffer\n\nThe solvent in which the selected column should be stored in for long term storage after removing from the instrument.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set from the StorageBuffer field from the Model[Item,Column] specified for the specified Column, if it is one of the buffers specified in the protocol. Otherwise set to BufferA of the protocol.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample.\n\nProgrammatic Pattern: (ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic\n\nIndex Matches to: ColumnSelector\n\nGradientA\n\nThe composition of BufferA within the flow, defined for specific time points. The composition is linearly interpolated for the intervening periods between the defined time points. For example for GradientA->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferA in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If Gradient option is specified, set from it or implicitly determined from the GradientB, GradientC, and GradientD options such that the total amounts to 100%.\n\nPattern Description: Binary or Isocratic.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic\n\nIndex Matches to: experiment samples\n\nGradientB\n\nThe composition of BufferB within the flow, defined for specific time points. The composition is linearly interpolated for the intervening periods between the defined time points. For example for GradientB->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferB in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If Gradient option is specified, set from it or implicitly determined from the GradientA, GradientC, and GradientD options such that the total amounts to 100%.\n\nPattern Description: Binary or Isocratic.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic\n\nIndex Matches to: experiment samples\n\nGradientC\n\nThe composition of BufferC within the flow, defined for specific time points. The composition is linearly interpolated for the intervening periods between the defined time points. For example for GradientC->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferC in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If Gradient option is specified, set from it or implicitly determined from the GradientA, GradientB, and GradientD options such that the total amounts to 100%.\n\nPattern Description: Binary or Isocratic.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic\n\nIndex Matches to: experiment samples\n\nGradientD\n\nThe composition of BufferD within the flow, defined for specific time points. The composition is linearly interpolated for the intervening periods between the defined time points. For example for GradientD->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferD in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If Gradient option is specified, set from it or implicitly determined from the GradientA, GradientB, and GradientC options such that the total amounts to 100%.\n\nPattern Description: Binary or Isocratic or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFlowRate\n\nThe net speed of the fluid flowing through the pump inclusive of the composition of BufferA, BufferB, BufferC, and BufferD specified in the gradient options. This speed is linearly interpolated such that consecutive entries of {Time, Flow Rate} will define the intervening fluid speed. For example, {{0 Minute, 0.3 Milliliter/Minute},{30 Minute, 0.5 Milliliter/Minute}} means flow rate of 0.4 Milliliter/Minute at 15 minutes into the run.\n\nDefault Value: Automatic\n\nDefault Calculation: If Gradient option is specified, automatically set from the method given in the Gradient option. If NominalFlowRate of the column model is specified, set to lesser of the NominalFlowRate for each of the columns, guard columns or the instrument's MaxFlowRate. Otherwise set to 1 Milliliter / Minute.\n\nPattern Description: Greater than or equal to 0 milliliters per minute and less than or equal to 200 milliliters per minute or list of one or more {Time, Flow Rate} entries.\n\nProgrammatic Pattern: (RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)]}..}) | Automatic\n\nIndex Matches to: experiment samples\n\nMaxAcceleration\n\nWhen ramping up the FlowRate of solvent through the instrument, the maximum allowed change per time in the FlowRate.\n\nDefault Value: Automatic\n\nDefault Calculation: For Waters instruments, automatically set to the lowest value from Max the Column, Instrument, and GuardColumn models. For other instruments, automatically set to Null.\n\nPattern Description: Greater than 0 milliliters per minute squared or Null.\n\nProgrammatic Pattern: (GreaterP[0*(Milliliter/Minute/Minute)] | Automatic) | Null\n\nGradient\n\nThe composition of different specified buffers in BufferA, BufferB, BufferC and BufferD over time in the fluid flow. Specific parameters of a gradient object can be overridden by specific options. Differential Refractive Index Reference Loading refers to the HPLC refractive index loading reference values as shown in the Figure 2.7.4. When open, the flow downstream of the column is loaded into the two flow cells simultaneously.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to best meet all the Gradient options (e.g. GradientA, GradientB, GradientC, GradientD, FlowRate).\n\nPattern Description: An object of type or subtype Object[Method, Gradient] or list of one or more {Time, Buffer A Composition, Buffer B Composition, Buffer C Composition, Buffer D Composition, Flow Rate, Differential Refractive Index Reference Loading} entries.\n\nProgrammatic Pattern: (ObjectP[Object[Method, Gradient]] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)], Open | Closed | None | Automatic}..}) | Automatic\n\nIndex Matches to: experiment samples\n\nSample Parameters\n\nNumberOfReplicates\n\nThe number of times to repeat measurements on each provided sample(s). If Aliquot -> True, this also indicates the number of times each provided sample will be aliquoted. For experiment samples {A,B,C} if NumberOfReplicates is specified as 3, the order of samples to run on the instrument will be {A,A,A,B,B,B,C,C,C}.\n\nDefault Value: Null\n\nPattern Description: Greater than or equal to 1 and less than or equal to 96 in increments of 1 or Null.\n\nProgrammatic Pattern: RangeP[1, 96, 1] | Null\n\nInjectionTable\n\nThe order of Sample, Standard and Blank sample injected into the Instrument during measurement and/or collection. This also includes the priming and flushing of the column(s).\n\nDefault Value: Automatic\n\nDefault Calculation: Samples are inserted in the order of the input samples based with the number of replicates. Standard and Blank samples are inserted based on the determination of StandardFrequency and BlankFrequency options. For example, StandardFrequency -> FirstAndLast and BlankFrequency -> Null result in Standard samples injected first, then samples, and then the Standard sample set again at the end. Column priming is inserted at the beginning and repeated according to ColumnPrimeFrequency. Column flushing is inserted at the end.\n\nPattern Description: List of one or more {Type, Sample, InjectionVolume, Column Position, Column Temperature, Gradient} entries.\n\nProgrammatic Pattern: {{Standard | Sample | Blank | ColumnPrime | ColumnFlush, (ObjectP[{Model[Sample], Object[Sample]}] | _String) | (Automatic | Null), RangeP[0*Microliter, 16*Milliliter] | (Automatic | Null), ColumnPositionP | Automatic, RangeP[5*Celsius, 90*Celsius] | (Ambient | Automatic), ObjectP[Object[Method, Gradient]] | Automatic}..} | Automatic\n\nSampleTemperature\n\nThe temperature of the chamber in which the samples, Standard, and Blank are stored while waiting for the Injection.\n\nDefault Value: Ambient\n\nPattern Description: Ambient or greater than or equal to 5 degrees Celsius and less than or equal to 40 degrees Celsius.\n\nProgrammatic Pattern: RangeP[5*Celsius, 40*Celsius] | Ambient\n\nColumnTemperature\n\nThe temperature of the column assembly throughout the measurement and/or fraction collection.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the corresponding gradient temperature specified in the Gradient option or the column temperature for the sample in the InjectionTable option; otherwise, set to Ambient.\n\nPattern Description: Ambient or greater than or equal to 5 degrees Celsius and less than or equal to 90 degrees Celsius.\n\nProgrammatic Pattern: (RangeP[5*Celsius, 90*Celsius] | Ambient) | Automatic\n\nIndex Matches to: experiment samples\n\nInjectionVolume\n\nThe physical quantity of sample loaded into the flow path for measurement and/or collection.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically defaults to the lesser of 10 uL or 90% of the available sample volume for Analytical measurement, lesser of 500 uL or 90% of the available sample volume for Semipreparative measurement and lesser of 5mL or 90% of available sample volume for Preparative measurement.\n\nPattern Description: Greater than or equal to 0 microliters and less than or equal to 16 milliliters.\n\nProgrammatic Pattern: RangeP[0*Microliter, 16*Milliliter] | Automatic\n\nIndex Matches to: experiment samples\n\nNeedleWashSolution\n\nThe solvent used to wash the injection needle before each sample introduction. For Dionex instruments, this is the same as BufferC and cannot be defined separately.\n\nDefault Value: Automatic\n\nDefault Calculation: If the instrument shares NeedleWashSolution with BufferC, automatically set to specified BufferC. Otherwise, defaults to Model[Sample, \"Milli-Q water\"] for IonExchange and SizeExclusion SeparationType or Model[Sample, StockSolution, \"20% Methanol in MilliQ Water\"] for other SeparationType.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample.\n\nProgrammatic Pattern: (ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic\n\nDetection\n\nAbsorbanceWavelength\n\nThe wavelength of light passed through the flow cell for the UVVis Detector. For PhotoDiodeArray Detector, a 3D data is generated from a spectrum of light passing through the flow cell. Absorbance wavelength in that case represents the wavelength at which a 2D data slice is generated from the 3D data.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector is selected or available on the selected instrument, automatically set to the absorbance wavelength corresponding to the maximum extinction coefficient from the ExtinctionCoefficients field in the identity model of the samples specified. If no ExtinctionCoefficients available, automatically set to to 260 Nanometer for oligomers or 280 Nanometer for proteins. If a PhotoDiodeArray Detector is selected or available on the selected Instrument, automatically set to All.\n\nPattern Description: All or Range or Single or Null.\n\nProgrammatic Pattern: ((RangeP[190*Nanometer, 900*Nanometer] | All | RangeP[190*Nanometer, 900*Nanometer] ;; RangeP[200*Nanometer, 900*Nanometer]) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nWavelengthResolution\n\nThe increment in wavelength for the range of wavelength of light passed through the flow for absorbance measurement of PhotoDiodeArray Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected Instrument, automatically set to 2.4 Nanometer.\n\nPattern Description: Greater than or equal to 0.1 nanometers and less than or equal to 12. nanometers or Null.\n\nProgrammatic Pattern: (RangeP[0.1*Nanometer, 12.*Nanometer] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nUVFilter\n\nIndicates if UV wavelengths (less than 210 nm) should be blocked from being transmitted through the sample for the PhotoDiodeArray Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected Instrument, automatically set to False.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nAbsorbanceSamplingRate\n\nThe number of times an absorbance measurement is made per second by the detector on the selected instrument. Lower values will be less susceptible to noise but will record less frequently across time.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set to 20/Second .\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 120 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 120*(1/Second)] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nExcitationWavelength\n\nThe wavelength(s) of light that is used to excite fluorescence in the samples when passed through the Fluorescence Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set from the FluorescenceExcitationMaximums field in the identity Model of the sample specified.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nEmissionWavelength\n\nThe wavelength(s) of light at which fluorescence emitted from the sample is measured in the Fluorescence Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set from the FluorescenceEmissionMaximums field in the identity Model of the sample specified.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nEmissionCutOffFilter\n\nThe cut-off wavelength to pre-select the emitted light from the sample and allow only the light with wavelength above the desired value to pass, before the light enters emission monochromator for final wavelength selection for Ultimate 3000 with FLR Detector. If set to None, no cut-off filter is used.\n\nDefault Value: Automatic\n\nDefault Calculation: If a Fluorescence Detector with a cut-off filter wheel is selected, automatically set to None.\n\nPattern Description: 280 nanometers, 370 nanometers, 435 nanometers, 530 nanometers, or None or Null.\n\nProgrammatic Pattern: (HPLCEmissionCutOffFilterP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFluorescenceGain\n\nFor each ExcitationWavelength/EmissionWavelength pair, the signal amplification factor which modulates the percentage of maximum voltage that can be applied to the Photomultiplier Tube of the Fluorescence Detector. Linear increase in voltage applied to the Photomultiplier tube leads to an exponential change in RFU signal. Variable Fluorescence Sensitivity implies a different fluorescence sensitivity for each Excitation/Emission Wavelength pair.\n\nDefault Value: Automatic\n\nDefault Calculation: If an instrument Fluorescence Detector is selected (Ultimate 3000 with FLR Detector or Waters Acquity UPLC H-Class FLR), automatically set to 1.\n\nPattern Description: Constant or Variable Fluorescence Sensitivity or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {RangeP[0*Percent, 100*Percent]..}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFluorescenceFlowCellTemperature\n\nThe temperature that the thermostat inside the fluorescence flow cell of the Fluorescence Detector is set to during the fluorescence measurement of the sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected and temperature control is available on that unit, automatically set to Ambient.\n\nPattern Description: Ambient or greater than or equal to 25 degrees Celsius and less than or equal to 50 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[25*Celsius, 50*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nLightScatteringLaserPower\n\nThe laser power filter used in the Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) Detector. 100% means that no filter is being used to restrict the laser power.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to 100 Percent.\n\nPattern Description: Greater than or equal to 10 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[10*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nLightScatteringFlowCellTemperature\n\nThe temperature that the thermostat inside the flow cell of the Detector is set to during the Multi-Angle static Light Scattering (MALS) and/or Dynamic Light Scattering (DLS) measurement of the sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to Ambient.\n\nPattern Description: Ambient or greater than or equal to 20 degrees Celsius and less than or equal to 70 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[20*Celsius, 70*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nRefractiveIndexMethod\n\nThe type of refractive index measurement of the Refractive Index (RI) Detector for the measurement of the sample. When DifferentialRefractiveIndex is selected, the refractive index difference between the flow downstream sample and the reference solvent is measured. See Figure 2.7.4 for more information.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected and Differential Refractive Index Reference Loading is set to Closed in Gradient, automatically set to DifferentialRefractiveIndex. Otherwise automatically set to RefractiveIndex.\n\nPattern Description: RefractiveIndex or DifferentialRefractiveIndex or Null.\n\nProgrammatic Pattern: ((RefractiveIndex | DifferentialRefractiveIndex) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nRefractiveIndexFlowCellTemperature\n\nThe temperature that the thermostat inside the refractive index flow cell of the Refractive Index (RI) Detector is set to during the refractive index measurement of the sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected, automatically set to Ambient.\n\nPattern Description: Ambient or greater than or equal to 4 degrees Celsius and less than or equal to 65 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[4*Celsius, 65*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\npHCalibration\n\nIndicates if 2-point calibration of the pH probe should be performed before the experiment starts. pH And Conductivity calibration is performed monthly every time a qualification procedure is run on the instrument.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to True if pH Detector is selected.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nLowpHCalibrationBuffer\n\nThe low pH buffer that should be used to calibrate the pH probe in the 2-point calibration.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to Model[Sample, \"pH 4.01 Calibration Buffer, Sachets\"] if pH Detector is selected and pHCalibration is True.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic) | Null\n\nLowpHCalibrationTarget\n\nThe pH of the LowpHCalibrationBuffer that should be used to calibrate the pH probe in the 2-point calibration.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the pH of the LowpHCalibrationBuffer's model.\n\nPattern Description: Greater than or equal to 0 and less than or equal to 14 or Null.\n\nProgrammatic Pattern: (RangeP[0, 14] | Automatic) | Null\n\nHighpHCalibrationBuffer\n\nThe high pH buffer that should be used to calibrate the pH probe in the 2-point calibration.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to Model[Sample, \"pH 7.00 Calibration Buffer, Sachets\"] if pH Detector is selected and pHCalibration is True. If HighpHCalibrationTarget is specified, set to a buffer with pH value close to that.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic) | Null\n\nHighpHCalibrationTarget\n\nThe pH of the HighpHCalibrationBuffer that should be used to calibrate the pH probe in the 2-point calibration.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the pH of the HighpHCalibrationBuffer's model.\n\nPattern Description: Greater than or equal to 0 and less than or equal to 14 or Null.\n\nProgrammatic Pattern: (RangeP[0, 14] | Automatic) | Null\n\npHTemperatureCompensation\n\nIndicates if the measured pH value should be automatically corrected according to the temperature inside the pH flow cell.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to True if pH Detector is selected.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nConductivityCalibration\n\nIndicates if 1-point calibration of the conductivity probe should be performed before the experiment starts. pH And Conductivity calibration is performed monthly every time a qualification procedure is run on the instrument.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to True if Conductivity Detector is selected.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nConductivityCalibrationBuffer\n\nThe buffer that should be used to calibrate the conductivity probe in the 1-point calibration.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to Model[Sample, \"Conductivity Standard 1413 \u00b5S, Sachets\"] if Conductivity Detector is selected and ConductivityCalibration is True.\n\nPattern Description: An object of type or subtype Object[Sample] or Model[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Object[Sample], Model[Sample]}] | _String) | Automatic) | Null\n\nConductivityCalibrationTarget\n\nThe conductivity value of the ConductivityCalibrationBuffer that should be used to calibrate the conductivity probe in the 1-point calibration.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the Conductivity of the ConductivityCalibrationBuffer's model.\n\nPattern Description: Greater than or equal to 10 microsiemens per centimeter and less than or equal to 1000 millisiemens per centimeter or Null.\n\nProgrammatic Pattern: (RangeP[10*Micro*(Siemens/Centimeter), 1000*Milli*(Siemens/Centimeter)] | Automatic) | Null\n\nConductivityTemperatureCompensation\n\nIndicates if the measured conductivity value should be automatically corrected according to the temperature inside the conductivity flow cell.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to True if Conductivity Detector is selected.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nNebulizerGas\n\nIndicates if Nitrogen sheath gas is flowed along with the sample within the EvaporativeLightScattering Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering detector is selected, automatically set to True.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nNebulizerGasHeating\n\nIndicates if the sheath gas that carries samples in the EvaporativeLightScattering Detector is heated.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and NebulizerGas is True, automatically set to True.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nNebulizerHeatingPower\n\nThe relative magnitude of the heating element used to heat the sheath gas for the EvaporativeLightScattering Detector (Corresponding temperature not measured by the manufacturer). Higher percent values correspond to percent of power going to heating coil.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and NebulizerGasHeating is True, automatically set to 50 Percent.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nNebulizerGasPressure\n\nThe applied pressure of sheath gas for the EvaporativeLightScattering Detector (Flow rate unmeasured by the manufacturer). Higher pressure (20-60 PSI) corresponds to faster sheath gas flow.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and NebulizerGas is True, automatically set to 40 PSI.\n\nPattern Description: Greater than or equal to 20 pounds\u2010force per inch squared and less than or equal to 60 pounds\u2010force per inch squared or Null.\n\nProgrammatic Pattern: (RangeP[20*PSI, 60*PSI] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nDriftTubeTemperature\n\nThe set temperature of the chamber thermostat through which the nebulized analytes flow within the EvaporativeLightScattering Detector. The purpose to heat the drift tube is to evaporate any unevaporated solvent remaining in the flow from the nebulizer.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and NebulizerGas is True, automatically set to 50 Celsius.\n\nPattern Description: Greater than or equal to 20 degrees Celsius and less than or equal to 100 degrees Celsius or Null.\n\nProgrammatic Pattern: (RangeP[20*Celsius, 100*Celsius] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nELSDGain\n\nThe percent of maximum voltage sent to the Photo Mulitplier Tube (PMT) for signal amplification for the EvaporativeLightScattering measurement. The percentage value specified here is converted into a unitless factor from 0 to 1000 which the software accepts to modulate the voltage for the PMT.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and NebulizerGas is True, automatically set to 50 Percent.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nELSDSamplingRate\n\nThe frequency of evaporative light scattering measurement. Lower values will be less susceptible to noise but will record less frequently across time. Lower or higher values do not affect the y axis of the measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and NebulizerGas is True, automatically set to 1/Second.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 80 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 80*(1/Second)] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFraction Collection\n\nCollectFractions\n\nIndicates if effluents from the Column should be captured and stored at specific time windows or during detection of peaks (fractions).\n\nDefault Value: Automatic\n\nDefault Calculation: If Scale is Preparative/SemiPreparative or any fraction collection options are specified, set to True. For analytical measurements, set to False.\n\nPattern Description: True or False.\n\nProgrammatic Pattern: BooleanP | Automatic\n\nIndex Matches to: experiment samples\n\nFractionCollectionDetector\n\nThe type of measurement that is used as signal to trigger fraction collection. It corresponds to the type of detector on the instrument.\n\nDefault Value: Automatic\n\nDefault Calculation: If CollectFractions is True, automatically set to the Detector in the Detector option for which the Detector hardware can communicate with the fraction collection (as indicated in the Instrumentation Table of ExperimentHPLC help file).\n\nPattern Description: Fluorescence, UVVis, PhotoDiodeArray, pH, or Conductance or Null.\n\nProgrammatic Pattern: (HPLCFractionCollectionDetectorTypeP | Automatic) | Null\n\nFractionCollectionContainer\n\nThe container in which the fractions are collected on the selected instrument's fraction collector.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to Model[Container, Plate, \"96-well 2mL Deep Well Plate\"] for UltiMate 3000 HPLC instruments and to Model[Container, Vessel, \"50mL Tube\"] for Agilent 1290 Infinity II instrument.\n\nPattern Description: An object of type or subtype Model[Container] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Container]}] | Automatic) | Null\n\nFractionCollectionMethod\n\nThe fraction collection method object which describes the conditions for which a fraction is collected. Specific parameters of the object can be overridden by other fraction collection options.\n\nDefault Value: Null\n\nPattern Description: An object of type or subtype Object[Method, FractionCollection] or Null.\n\nProgrammatic Pattern: ObjectP[Object[Method, FractionCollection]] | Null\n\nIndex Matches to: experiment samples\n\nFractionCollectionStartTime\n\nThe time at which to start column effluent capture. Time in this case is the duration from the start of sample injection.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set from the method specified in the FractionCollectionMethod option, if available. Otherwise set to the second time point of the gradient domains if there are more than two time points, or the first time point if not.\n\nPattern Description: Greater than or equal to 0 minutes and less than or equal to 72 hours or Null.\n\nProgrammatic Pattern: (RangeP[0*Minute, $MaxExperimentTime] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFractionCollectionEndTime\n\nThe time to end column effluent capture. Time in this case is the duration from the start of sample injection.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically inherited from the method specified in the FractionCollectionMethod option. Otherwise set to the last time point of the gradient domains.\n\nPattern Description: Greater than or equal to 0 minutes and less than or equal to 72 hours or Null.\n\nProgrammatic Pattern: (RangeP[0*Minute, $MaxExperimentTime] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFractionCollectionMode\n\nThe method by which fractions collection should be triggered (peak detection, a constant threshold, or a fixed fraction time). In peak detection mode, the fraction collection is triggered when a change in slope of the FractionCollectionDetector signal is observed for a specified PeakDuration time. In constant threshold method, whenever the signal from the FractionCollectionDetector is above the specified value, fraction collection is triggered. In fixed fraction time, fractions are collected during the whole time interval specified.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically inherited from a method specified by FractionCollectionMethod option, or implicitly resolved from other fraction collection options. If AbsoluteThreshold is specified, set to Threshold. If PeakSlope is specified, set to Peak. If MaxCollectionPeriod is specified, set to Time. Otherwise set to Threshold if CollectFractions is True.\n\nPattern Description: Time, Peak, or Threshold or Null.\n\nProgrammatic Pattern: (FractionCollectionModeP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nMaxFractionVolume\n\nThe maximum amount of sample to be collected in a single fraction. If fraction detection trigger is not off, the collector moves position to the next container. For example, if AbsorbanceThreshold is set to 180 MilliAbsorbanceUnit and at MaxFractionVolume the absorbance value is still above 180 MilliAbsorbanceUnit, the fraction collector continues to collect fractions in the next container in line.\n\nDefault Value: Automatic\n\nDefault Calculation: If FractionCollection is True, automatically set according to the MaxFractionVolume in the method specified by FractionCollectionMethod option, if available. If FractionCollectionContainer is specified, set to MaxVolume of the Model specified. Otherwise, automatically set to 1.8 Milliliter for UltiMate 3000 HPLC instruments and 50 Milliliter for Agilent 1290 Infinity II instrument.\n\nPattern Description: Greater than or equal to 10 microliters and less than or equal to 50 milliliters or Null.\n\nProgrammatic Pattern: (RangeP[10*Microliter, 50*Milliliter] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nMaxCollectionPeriod\n\nThe amount of time after which a new fraction will be generated (Fraction Collector moves to the next vial) when FractionCollectionMode is Time. For example, if MaxCollectionPeriod is 120 Second, the fraction collector continues to collect fractions in the next container in line after 120 Second.\n\nDefault Value: Automatic\n\nDefault Calculation: If FractionCollection is True, automatically set according to the MaxCollectionPeriod in the method specified by FractionCollectionMethod option, if available. Otherwise automatically set to the time it takes to fill the FractionCollectorContainer to 80% of the MaxFractionVolume.\n\nPattern Description: Greater than or equal to 0 seconds and less than or equal to 72 hours or Null.\n\nProgrammatic Pattern: (RangeP[0*Second, $MaxExperimentTime] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nAbsoluteThreshold\n\nThe signal value from FractionCollectionDetector above which fractions will always be collected. Both AbsoluteThreshold and PeakSlope conditions must be met in order to trigger fraction collection.\n\nDefault Value: Automatic\n\nDefault Calculation: Inherited from a method specified by FractionCollectionMethod option or set based on FractionCollectionDetector if FractionCollectionMode is Threshold. If the FractionCollectionDetector is UVVis, automatically set to 500 Milli AbsorbanceUnit. If the FractionCollectionDetector is Fluorescence, automatically set to 100 Milli RFU.\n\nPattern Description: Others or pH or Null.\n\nProgrammatic Pattern: ((RangeP[0, 14] | (GreaterEqualP[0*AbsorbanceUnit] | GreaterEqualP[0*RFU] | GreaterEqualP[10*Micro*(Siemens/Centimeter)])) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nPeakSlope\n\nThe minimum slope (signal change per second) for PeakSlopeDuration that must be met before a peak is detected and fraction collection begins, and collection ends when the AbsoluteThreshold value is reached. A new peak (and new fraction) can be registered once the slope drops below this. Both AbsoluteThreshold and PeakSlope conditions must be met in order to trigger fraction collection.\n\nDefault Value: Automatic\n\nDefault Calculation: If FractionCollection is True, automatically set according to the PeakSlope in the method specified by FractionCollectionMethod option, if available. If the FractionCollectionDetector is UVVis and FractionCollectionMode is Peak, automatically set to 1 Milli AbsorbanceUnit/Second. If the FractionCollectionDetector is Fluorescence and FractionCollectionMode is Peak, automatically set to 0.2 Milli RFU/Second.\n\nPattern Description: Others or pH or Null.\n\nProgrammatic Pattern: ((RangeP[0, 14] | (GreaterEqualP[0*(AbsorbanceUnit/Second)] | GreaterEqualP[0*(RFU/Second)] | GreaterEqualP[10*Micro*(Siemens/Centimeter/Second)])) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nPeakSlopeDuration\n\nThe minimum duration that changes in slopes must be maintained before they are registered.\n\nDefault Value: Automatic\n\nDefault Calculation: If FractionCollection is True, automatically set according to the PeakSlopeDuration in the method specified by FractionCollectionMethod option, if available. Otherwise automatically set to 0.5 Second if FractionCollectionMode is Peak.\n\nPattern Description: Greater than or equal to 0 seconds and less than or equal to 4 seconds or Null.\n\nProgrammatic Pattern: (RangeP[0*Second, 4*Second] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nPeakEndThreshold\n\nThe signal value below which the end of a peak is marked and fraction collection stops.\n\nDefault Value: Automatic\n\nDefault Calculation: If FractionCollection is True, automatically set according to the PeakEndThreshold in the method specified by FractionCollectionMethod option, if available. If FractionCollectionMode is Peak, automatically set to 1 Milli AbsorbanceUnit for UVVis detector, 0.2 Milli * RFU for Fluorescence detector, 10 for pH detector or 10.0 Milli * Siemens / Centimeter for Conductivity detector.\n\nPattern Description: Others or pH or Null.\n\nProgrammatic Pattern: ((RangeP[0, 14] | (GreaterEqualP[0*AbsorbanceUnit] | GreaterEqualP[0*RFU] | GreaterEqualP[10*Micro*(Siemens/Centimeter)])) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nStandards\n\nStandard\n\nThe reference compound(s) to inject to the instrument, often used for quantification or to check internal measurement consistency.\n\nDefault Value: Automatic\n\nDefault Calculation: If any other Standard option is specified, automatically set based on the SeparationMode option. If InjectionTable is specified, set from the specified Standard entries in the InjectionTable.\n\nPattern Description: An object of type or subtype Model[Sample] or Object[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Model[Sample], Object[Sample]}] | _String) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardInjectionVolume\n\nThe physical quantity of Standard sample loaded into the flow path on the selected instrument along with the mobile phase onto the stationary phase.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set equal to the first entry in InjectionVolume.\n\nPattern Description: Greater than or equal to 0 microliters and less than or equal to 16 milliliters or Null.\n\nProgrammatic Pattern: (RangeP[0*Microliter, 16*Milliliter] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardFrequency\n\nThe frequency at which Standard measurements will be inserted between the experiment samples.\n\nDefault Value: Automatic\n\nDefault Calculation: If injectionTable is given, automatically set to Null and the sequence of Standards specified in the InjectionTable will be used in the experiment. If any other Standard option is specified, automatically set to FirstAndLast.\n\nPattern Description: Greater than 0 in increments of 1 or None, First, Last, FirstAndLast, or GradientChange or Null.\n\nProgrammatic Pattern: (((None | First | Last | FirstAndLast | GradientChange) | GreaterP[0, 1]) | Automatic) | Null\n\nStandardColumnPosition\n\nThe position of the column selector valve and the desired column configuration that will be used for each standard sample as it is injected.\n\nDefault Value: Automatic\n\nDefault Calculation: If InjectionTable is specified, automatically set from the Column Position entry for the standard sample. Otherwise set to PositionA.\n\nPattern Description: PositionA, PositionB, PositionC, PositionD, PositionE, PositionF, PositionG, or PositionH or Null.\n\nProgrammatic Pattern: (ColumnPositionP | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardColumnTemperature\n\nThe temperature of the column assembly throughout the Standard gradient and measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the corresponding gradient temperature specified in the StandardGradient option or the column temperature for the sample in the InjectionTable option; otherwise, set as the first value of the ColumnTemperature option.\n\nPattern Description: Ambient or greater than or equal to 5 degrees Celsius and less than or equal to 90 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[5*Celsius, 90*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardGradientA\n\nThe composition of BufferA within the flow, defined for specific time points for Standard measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for StandardGradientA->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferA in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If StandardGradient option is specified, set from it or implicitly determined from the StandardGradientB, StandardGradientC, and StandardGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer A Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardGradientB\n\nThe composition of BufferB within the flow, defined for specific time points for Standard measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for StandardGradientB->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferB in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If StandardGradient option is specified, set from it or implicitly determined from the StandardGradientA, StandardGradientC, and StandardGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer B Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardGradientC\n\nThe composition of BufferC within the flow, defined for specific time points for Standard measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for StandardGradientC->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferC in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If StandardGradient option is specified, set from it or implicitly determined from the StandardGradientA, StandardGradientB, and StandardGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer C Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardGradientD\n\nThe composition of BufferD within the flow, defined for specific time points for Standard measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for StandardGradientD->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferD in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If StandardGradient option is specified, set from it or implicitly determined from the StandardGradientA, StandardGradientB, and StandardGradientC options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer D Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardFlowRate\n\nThe net speed of the fluid flowing through the pump inclusive of the composition of BufferA, BufferB, BufferC, and BufferD specified in the StandardGradient options during Standard measurement. This speed is linearly interpolated such that consecutive entries of {Time, Flow Rate} will define the intervening fluid speed. For example, {{0 Minute, 0.3 Milliliter/Minute},{30 Minute, 0.5 Milliliter/Minute}} means flow rate of 0.4 Milliliter/Minute at 15 minutes into the run.\n\nDefault Value: Automatic\n\nDefault Calculation: If StandardGradient option is specified, automatically set from the method given in the StandardGradient option. If NominalFlowRate of the column model is specified, set to lesser of the NominalFlowRate for each of the columns, guard columns or the instrument's MaxFlowRate. Otherwise set to 1 Milliliter / Minute.\n\nPattern Description: Greater than or equal to 0 milliliters per minute and less than or equal to 200 milliliters per minute or list of one or more {Time, Flow Rate} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)] | {{GreaterEqualP[0*Minute], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)]}..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardGradient\n\nThe composition of different specified buffers in BufferA, BufferB, BufferC and BufferD over time in the fluid flow for Standard measurement. Specific parameters of a gradient object can be overridden by specific options. Differential Refractive Index Reference Loading refers to the HPLC refractive index loading reference values as shown in the Figure 2.7.4. When open, the flow downstream of the column is loaded into the two flow cells simultaneously.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to best meet all the StandardGradient options (e.g. StandardGradientA, StandardGradientB, StandardGradientC, StandardGradientD, StandardFlowRate).\n\nPattern Description: An object of type or subtype Object[Method, Gradient] or list of one or more {Time, Buffer A Composition, Buffer B Composition, Buffer C Composition, Buffer D Composition, Flow Rate, Differential Refractive Index Reference Loading} entries or Null.\n\nProgrammatic Pattern: ((ObjectP[Object[Method, Gradient]] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)], Open | Closed | None | Automatic}..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardAbsorbanceWavelength\n\nFor Standard measurement, the wavelength of light passed through the flow cell for the UVVis Detector. For PhotoDiodeArray Detector, a 3D data is generated from a spectrum of light passing through the flow cell. Absorbance wavelength in that case represents the wavelength at which a 2D data slice is generated from the 3D data.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the same value as the first entry in AbsorbanceWavelength.\n\nPattern Description: All or Range or Single or Null.\n\nProgrammatic Pattern: ((RangeP[190*Nanometer, 900*Nanometer] | All | RangeP[190*Nanometer, 900*Nanometer] ;; RangeP[200*Nanometer, 900*Nanometer]) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardWavelengthResolution\n\nThe increment in wavelength for the range of wavelength of light passed through the flow for absorbance measurement for the instruments with PhotoDiodeArray Detector for Standard measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected Instrument, automatically set equal to the same value as the first entry in WavelengthResolution.\n\nPattern Description: Greater than or equal to 0.1 nanometers and less than or equal to 12. nanometers or Null.\n\nProgrammatic Pattern: (RangeP[0.1*Nanometer, 12.*Nanometer] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardUVFilter\n\nIndicates if UV wavelengths (less than 210 nm) should be blocked from being transmitted through the sample for the PhotoDiodeArray Detector for Standard measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected Instrument, automatically set to the first entry in UVFilter.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardAbsorbanceSamplingRate\n\nThe number of times an absorbance measurement is made per second for Standard sample. Lower values will be less susceptible to noise but will record less frequently across time.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the first entry in AbsorbanceSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 120 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 120*(1/Second)] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardExcitationWavelength\n\nThe wavelength(s) that is used to excite fluorescence in the Standard sample in the Fluorescence Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in ExcitationWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardEmissionWavelength\n\nThe wavelength(s) of light at which fluorescence emitted from the Standard sample is measured in the Fluorescence Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in EmissionWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardEmissionCutOffFilter\n\nThe cut-off wavelength to pre-select the emitted light from the Standard sample and allow only the light with wavelength above the desired value to pass, before the light enters emission monochromator for final wavelength selection for Ultimate 3000 with FLR Detector. If set to None, no cut-off filter is used.\n\nDefault Value: Automatic\n\nDefault Calculation: If a Fluorescence Detector with a cut-off filter wheel is selected, automatically set to the first entry in EmissionCutOffFilter.\n\nPattern Description: 280 nanometers, 370 nanometers, 435 nanometers, 530 nanometers, or None or Null.\n\nProgrammatic Pattern: (HPLCEmissionCutOffFilterP | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardFluorescenceGain\n\nFor each StandardExcitationWavelength/StandardEmissionWavelength pair, the signal amplification factor which modulates the percentage of maximum voltage that can be applied to the Photomultiplier Tube of the Fluorescence Detector during Standard measurement. Linear increase in voltage applied to the Photomultiplier tube leads to an exponential change in RFU signal. Variable Fluorescence Sensitivity implies a different fluorescence sensitivity for each Excitation/Emission Wavelength pair.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in FluorescenceGain.\n\nPattern Description: Constant or Variable Fluorescence Sensitivity or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {RangeP[0*Percent, 100*Percent]..}) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardFluorescenceFlowCellTemperature\n\nThe temperature that the thermostat inside the fluorescence flow cell of the Fluorescence Detector is set to during the fluorescence measurement of the Standard sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected and temperature control is available on that unit, automatically set to the first entry in FluorescenceFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 25 degrees Celsius and less than or equal to 50 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[25*Celsius, 50*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardLightScatteringLaserPower\n\nThe laser power filter used in the Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) Detector for the measurement of the Standard sample. 100% means that no filter is being used to restrict the laser power.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to the first entry in LightScatteringLaserPower.\n\nPattern Description: Greater than or equal to 10 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[10*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardLightScatteringFlowCellTemperature\n\nThe temperature that the thermostat inside the flow cell of the Detector is set to during the Multi-Angle static Light Scattering (MALS) and/or Dynamic Light Scattering (DLS) measurement of the Standard sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to the first entry in LightScatteringFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to -15 degrees Celsius and less than or equal to 210 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[-15*Celsius, 210*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardRefractiveIndexMethod\n\nThe type of refractive index measurement of the Refractive Index (RI) Detector for the measurement of the Standard. When DifferentialRefractiveIndex is selected, the refractive index difference between the flow downstream sample and the reference solvent is measured. See Figure 2.7.4 for more information.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected and Differential Refractive Index Reference Loading is set to Closed in StandardGradient, automatically set to DifferentialRefractiveIndex. Otherwise automatically set to RefractiveIndex.\n\nPattern Description: RefractiveIndex or DifferentialRefractiveIndex or Null.\n\nProgrammatic Pattern: ((RefractiveIndex | DifferentialRefractiveIndex) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardRefractiveIndexFlowCellTemperature\n\nThe temperature that the thermostat inside the refractive index flow cell of the Refractive Index (RI) Detector is set to during the refractive index measurement of the Standard sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected, automatically set to the first entry in RefractiveIndexFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 4 degrees Celsius and less than or equal to 65 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[4*Celsius, 65*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardNebulizerGas\n\nIndicates if Nitrogen sheath gas is flowed along with the Standard sample within the EvaporativeLightScattering Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering is selected, automatically set to the first entry in NebulizerGas.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardNebulizerGasHeating\n\nIndicates if the sheath gas that carries samples in the EvaporativeLightScattering Detector is heated for Standard measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and StandardNebulizerGas is True, automatically set to the first entry in NebulizerGasHeating.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardNebulizerHeatingPower\n\nThe relative magnitude of the heating element used to heat the sheath gas for the EvaporativeLightScattering Detector for Standard measurement (Corresponding temperature not measured by the manufacturer). Higher percent values correspond to percent of power going to heating coil.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and StandardNebulizerGas is True, automatically set to the first entry in NebulizerHeatingPower.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardNebulizerGasPressure\n\nThe applied pressure of sheath gas for the EvaporativeLightScattering Detector for Standard measurement (Flow rate unmeasured by the manufacturer). Higher pressure corresponds to faster sheath gas flow.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and StandardNebulizerGas is True, automatically set to the first entry in NebulizerGasPressure.\n\nPattern Description: Greater than or equal to 20 pounds\u2010force per inch squared and less than or equal to 60 pounds\u2010force per inch squared or Null.\n\nProgrammatic Pattern: (RangeP[20*PSI, 60*PSI] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardDriftTubeTemperature\n\nThe set temperature of the chamber thermostat through which the nebulized analytes flow within the EvaporativeLightScattering Detector for Standard samples. The purpose to heat the drift tube is to evaporate any unevaporated solvent remaining in the flow from the nebulizer.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and StandardNebulizerGas is True, automatically set to the first entry in DriftTubeTemperature.\n\nPattern Description: Greater than or equal to 20 degrees Celsius and less than or equal to 100 degrees Celsius or Null.\n\nProgrammatic Pattern: (RangeP[20*Celsius, 100*Celsius] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardELSDGain\n\nThe percent of maximum voltage sent to the Photo Mulitplier Tube (PMT) for signal amplification for the EvaporativeLightScattering measurement. The percentage value specified here is converted into a unitless factor from 0 to 1000 which the software accepts to modulate the voltage for the PMT.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and StandardNebulizerGas is True, automatically set to the first entry in ELSDGain.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardELSDSamplingRate\n\nThe frequency of evaporative light scattering measurement for Standard samples. Lower values will be less susceptible to noise but will record less frequently across time. Lower or higher values do not affect the y axis of the measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and NebulizerGas is True, automatically set to the first entry in ELSDSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 80 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 80*(1/Second)] | Automatic) | Null\n\nIndex Matches to: Standard\n\nStandardStorageCondition\n\nThe non-default conditions under which any standards used by this experiment should be stored after the protocol is completed. If left unset, Standard samples will be stored according to their Models' DefaultStorageCondition.\n\nDefault Value: Null\n\nPattern Description: {AmbientStorage, Refrigerator, Freezer, DeepFreezer, CryogenicStorage, YeastIncubation, YeastShakingIncubation, BacterialIncubation, BacterialShakingIncubation, MammalianIncubation, ViralIncubation, CrystalIncubation, AcceleratedTesting, IntermediateTesting, LongTermTesting, UVVisLightTesting} or Disposal or Null.\n\nProgrammatic Pattern: (Alternatives[SampleStorageTypeP | Disposal]) | Null\n\nIndex Matches to: Standard\n\nBlanks\n\nBlank\n\nThe object(s) (samples) to inject typically as negative controls (e.g. to test effects stemming from injection, sample solvent, impurities on the column or buffer).\n\nDefault Value: Automatic\n\nDefault Calculation: If any other Blank option is specified or RefractiveIndex Detector is selected, automatically set to the specified BufferA or Model[Sample, \"Milli-Q water\"].\n\nPattern Description: An object of type or subtype Model[Sample] or Object[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Model[Sample], Object[Sample]}] | _String) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankInjectionVolume\n\nThe physical quantity of Blank sample that is loaded into the flow path on the selected instrument along with the mobile phase onto the stationary phase.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set equal to the first entry in InjectionVolume.\n\nPattern Description: Greater than or equal to 0 microliters and less than or equal to 16 milliliters or Null.\n\nProgrammatic Pattern: (RangeP[0*Microliter, 16*Milliliter] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankFrequency\n\nThe frequency at which Blank measurements will be inserted between Sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If injectionTable is given, automatically set to Null and the sequence of Blanks specified in the InjectionTable will be used in the experiment. If any other Blank option is specified, automatically set to FirstAndLast.\n\nPattern Description: Greater than 0 in increments of 1 or None, First, Last, FirstAndLast, or GradientChange or Null.\n\nProgrammatic Pattern: (((None | First | Last | FirstAndLast | GradientChange) | GreaterP[0, 1]) | Automatic) | Null\n\nBlankColumnPosition\n\nThe position of the column selector valve and the desired column configuration that will be used for each blank sample as it is injected.\n\nDefault Value: Automatic\n\nDefault Calculation: For a batch of samples automatically set from the specified Column option. If InjectionTable is specified, set from the Column Position for blank Type injections.\n\nPattern Description: PositionA, PositionB, PositionC, PositionD, PositionE, PositionF, PositionG, or PositionH or Null.\n\nProgrammatic Pattern: (ColumnPositionP | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankColumnTemperature\n\nThe temperature of the column assembly throughout the Blank gradient and measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the corresponding gradient temperature specified in the BlankGradient option or the column temperature for the sample in the InjectionTable option; otherwise, set as the first value of the ColumnTemperature option.\n\nPattern Description: Ambient or greater than or equal to 5 degrees Celsius and less than or equal to 90 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[5*Celsius, 90*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankGradientA\n\nThe composition of BufferA within the flow, defined for specific time points for Blank measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for BlankGradientA->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferA in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If BlankGradient option is specified, set from it or implicitly determined from the BlankGradientB, BlankGradientC, and BlankGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer A Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankGradientB\n\nThe composition of BufferB within the flow, defined for specific time points for Blank measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for BlankGradientB->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferB in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If BlankGradient option is specified, set from it or implicitly determined from the BlankGradientA, BlankGradientC, and BlankGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer B Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankGradientC\n\nThe composition of BufferC within the flow, defined for specific time points for Blank measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for BlankGradientC->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferC in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If BlankGradient option is specified, set from it or implicitly determined from the BlankGradientA, BlankGradientB, and BlankGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer C Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankGradientD\n\nThe composition of BufferD within the flow, defined for specific time points for Blank measurement. The composition is linearly interpolated for the intervening periods between the defined time points. For example for BlankGradientD->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferD in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If BlankGradient option is specified, set from it or implicitly determined from the BlankGradientA, BlankGradientB, and BlankGradientC options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer D Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankFlowRate\n\nThe net speed of the fluid flowing through the pump inclusive of the composition of BufferA, BufferB, BufferC, and BufferD specified in the BlankGradient options during Blank measurement. This speed is linearly interpolated such that consecutive entries of {Time, Flow Rate} will define the intervening fluid speed. For example, {{0 Minute, 0.3 Milliliter/Minute},{30 Minute, 0.5 Milliliter/Minute}} means flow rate of 0.4 Milliliter/Minute at 15 minutes into the run.\n\nDefault Value: Automatic\n\nDefault Calculation: If BlankGradient option is specified, automatically set from the method given in the BlankGradient option. If NominalFlowRate of the column model is specified, set to lesser of the NominalFlowRate for each of the columns, guard columns or the instrument's MaxFlowRate. Otherwise set to 1 Milliliter / Minute.\n\nPattern Description: Greater than or equal to 0 milliliters per minute and less than or equal to 200 milliliters per minute or list of one or more {Time, Flow Rate} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)] | {{GreaterEqualP[0*Minute], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)]}..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankGradient\n\nThe composition of different specified buffers in BufferA, BufferB, BufferC and BufferD over time in the fluid flow during Blank measurement. Specific parameters of a gradient object can be overridden by specific options. Differential Refractive Index Reference Loading refers to the HPLC refractive index loading reference values as shown in the Figure 2.7.4. When open, the flow downstream of the column is loaded into the two flow cells simultaneously.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to best meet all the BlankGradient options (e.g. BlankGradientA, BlankGradientB, BlankGradientC, BlankGradientD, BlankFlowRate).\n\nPattern Description: An object of type or subtype Object[Method, Gradient] or list of one or more {Time, Buffer A Composition, Buffer B Composition, Buffer C Composition, Buffer D Composition, Flow Rate, Differential Refractive Index Reference Loading} entries or Null.\n\nProgrammatic Pattern: ((ObjectP[Object[Method, Gradient]] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)], Open | Closed | None | Automatic}..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankAbsorbanceWavelength\n\nFor Blank measurement, the wavelength of light passed through the flow cell for the UVVis Detector. For PhotoDiodeArray Detector, a 3D data is generated from a spectrum of light passing through the flow cell. Absorbance wavelength in that case represents the wavelength at which a 2D data slice is generated from the 3D data.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set as the first entry in AbsorbanceWavelength.\n\nPattern Description: All or Range or Single or Null.\n\nProgrammatic Pattern: ((RangeP[190*Nanometer, 900*Nanometer] | All | RangeP[190*Nanometer, 900*Nanometer] ;; RangeP[200*Nanometer, 900*Nanometer]) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankWavelengthResolution\n\nThe increment in wavelength for the range of wavelength of light passed through the flow for absorbance measurement for the instruments with PhotoDiodeArray Detector for Blank measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set as the first entry in WavelengthResolution.\n\nPattern Description: Greater than or equal to 0.1 nanometers and less than or equal to 12. nanometers or Null.\n\nProgrammatic Pattern: (RangeP[0.1*Nanometer, 12.*Nanometer] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankUVFilter\n\nIndicates if UV wavelengths (less than 210 nm) should be blocked from being transmitted through the sample for the PhotoDiodeArray Detector for Blank measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set as the first entry in UVFilter.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankAbsorbanceSamplingRate\n\nThe number of times the absorbance measurement is made per second during Blank measurement. Lower values will be less susceptible to noise but will record less frequently across time.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the first entry in AbsorbanceSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 120 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 120*(1/Second)] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankExcitationWavelength\n\nThe wavelength(s) that is used to excite fluorescence in the Blank sample in the Fluorescence Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in ExcitationWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankEmissionWavelength\n\nThe wavelength(s) of light at which fluorescence emitted from the Blank sample is measured in the Fluorescence Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in EmissionWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankEmissionCutOffFilter\n\nThe cut-off wavelength to pre-select the emitted light from the Blank sample and allow only the light with wavelength above the desired value to pass, before the light enters emission monochromator for final wavelength selection for Ultimate 3000 with FLR Detector. If set to None, no cut-off filter is used.\n\nDefault Value: Automatic\n\nDefault Calculation: If a Fluorescence Detector with a cut-off filter wheel is selected, automatically set to the first entry in EmissionCutOffFilter.\n\nPattern Description: 280 nanometers, 370 nanometers, 435 nanometers, 530 nanometers, or None or Null.\n\nProgrammatic Pattern: (HPLCEmissionCutOffFilterP | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankFluorescenceGain\n\nFor each BlankExcitationWavelength/BlankEmissionWavelength pair, the signal amplification factor which modulates the percentage of maximum voltage that can be applied to the Photomultiplier Tube of the Fluorescence Detector during Standard measurement. Linear increase in voltage applied to the Photomultiplier tube leads to an exponential change in RFU signal. Variable Fluorescence Sensitivity implies a different fluorescence sensitivity for each Excitation/Emission Wavelength pair.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in FluorescenceGain.\n\nPattern Description: Constant or Variable Fluorescence Sensitivity or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {RangeP[0*Percent, 100*Percent]..}) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankFluorescenceFlowCellTemperature\n\nThe temperature that the thermostat inside the fluorescence flow cell of the Fluorescence Detector is set to during the fluorescence measurement of the Blank sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected and temperature control is available on that unit, automatically set to the first entry in FluorescenceFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 25 degrees Celsius and less than or equal to 50 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[25*Celsius, 50*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankLightScatteringLaserPower\n\nThe laser power filter used in the Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) Detector for the measurement of the Blank sample. 100% means that no filter is being used to restrict the laser power.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to the first entry in LightScatteringLaserPower.\n\nPattern Description: Greater than or equal to 10 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[10*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankLightScatteringFlowCellTemperature\n\nThe temperature that the thermostat inside the flow cell of the Detector is set to during the Multi-Angle static Light Scattering (MALS) and/or Dynamic Light Scattering (DLS) measurement of the Blank sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to the first entry in LightScatteringFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to -15 degrees Celsius and less than or equal to 210 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[-15*Celsius, 210*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankRefractiveIndexMethod\n\nThe type of refractive index measurement of the Refractive Index (RI) Detector for the measurement of the Blank. When DifferentialRefractiveIndex is selected, the refractive index difference between the flow downstream sample and the reference solvent is measured. See Figure 2.7.4 for more information.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected and Differential Refractive Index Reference Loading is set to Closed in BlankGradient, automatically set to DifferentialRefractiveIndex. Otherwise automatically set to RefractiveIndex.\n\nPattern Description: RefractiveIndex or DifferentialRefractiveIndex or Null.\n\nProgrammatic Pattern: ((RefractiveIndex | DifferentialRefractiveIndex) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankRefractiveIndexFlowCellTemperature\n\nThe temperature that the thermostat inside the refractive index flow cell of the Refractive Index (RI) Detector is set to during the refractive index measurement of the Blank sample.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected, automatically set to the first entry in RefractiveIndexFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 4 degrees Celsius and less than or equal to 65 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[4*Celsius, 65*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankNebulizerGas\n\nIndicates if Nitrogen sheath gas is flowed along with the Blank sample within the EvaporativeLightScattering Detector.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering is selected, automatically set to the first entry in NebulizerGas.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankNebulizerGasHeating\n\nIndicates if the sheath gas that carries samples in the EvaporativeLightScattering Detector is heated for Blank measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and BlankNebulizerGas is True, automatically set to the first entry in NebulizerGasHeating.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankNebulizerHeatingPower\n\nThe relative magnitude of the heating element used to heat the sheath gas for the EvaporativeLightScattering Detector for Blank measurement (Corresponding temperature not measured by the manufacturer). Higher percent values correspond to percent of power going to heating coil.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and BlankNebulizerGas is True, automatically set to the first entry in NebulizerHeatingPower.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankNebulizerGasPressure\n\nThe applied pressure of sheath gas for the EvaporativeLightScattering Detector for Blank measurement (Flow rate unmeasured by the manufacturer). Higher pressure corresponds to faster sheath gas flow.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and BlankNebulizerGas is True, automatically set to the first entry in NebulizerGasPressure.\n\nPattern Description: Greater than or equal to 20 pounds\u2010force per inch squared and less than or equal to 60 pounds\u2010force per inch squared or Null.\n\nProgrammatic Pattern: (RangeP[20*PSI, 60*PSI] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankDriftTubeTemperature\n\nThe set temperature of the chamber thermostat through which the nebulized analytes flow within the EvaporativeLightScattering Detector for Blank samples. The purpose to heat the drift tube is to evaporate any unevaporated solvent remaining in the flow from the nebulizer.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and BlankNebulizerGas is True, automatically set to the first entry in DriftTubeTemperature.\n\nPattern Description: Greater than or equal to 20 degrees Celsius and less than or equal to 100 degrees Celsius or Null.\n\nProgrammatic Pattern: (RangeP[20*Celsius, 100*Celsius] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankELSDGain\n\nThe percent of maximum voltage sent to the Photo Mulitplier Tube (PMT) for signal amplification for the EvaporativeLightScattering measurement. The percentage value specified here is converted into a unitless factor from 0 to 1000 which the software accepts to modulate the voltage for the PMT.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and BlankNebulizerGas is True, automatically set to the first entry in ELSDGain.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankELSDSamplingRate\n\nThe frequency of evaporative light scattering measurement for Blank Samples. Lower values will be less susceptible to noise but will record less frequently across time. Lower or higher values do not affect the y axis of the measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and BlankNebulizerGas is True, automatically set to the first entry in ELSDSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 80 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 80*(1/Second)] | Automatic) | Null\n\nIndex Matches to: Blank\n\nBlankStorageCondition\n\nThe non-default conditions under which any blanks used by this experiment should be stored after the protocol is completed. If left unset, Blank samples will be stored according to their Models' DefaultStorageCondition.\n\nDefault Value: Null\n\nPattern Description: {AmbientStorage, Refrigerator, Freezer, DeepFreezer, CryogenicStorage, YeastIncubation, YeastShakingIncubation, BacterialIncubation, BacterialShakingIncubation, MammalianIncubation, ViralIncubation, CrystalIncubation, AcceleratedTesting, IntermediateTesting, LongTermTesting, UVVisLightTesting} or Disposal or Null.\n\nProgrammatic Pattern: (Alternatives[SampleStorageTypeP | Disposal]) | Null\n\nIndex Matches to: Blank\n\nColumn Prime\n\nColumnRefreshFrequency\n\nThe frequency of column prime inserted into the order of analyte injections at which solvent is flowed to equilibrate the column in order to remove contaminants and reset the gradient to match the starting percentage of the subsequent injection. An initial column prime and final column flush will be performed unless Null or None is specified. For First, it is performed at the beginning. For Last, it is performed at the end. For FirstAndLast, it is performed both at the beginning and end. For GradientChange, it is performed every time a change in the gradient is encountered for the injections. A Number indicates the number of injections after which it is performed and also in the beginning (eg: for 2, it is performed at the start and after 2nd, 4th, 6th and so on injections).\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to Null when InjectionTable option is specified (meaning that this option is inconsequential) or no column is used in the experiment; otherwise, set to GradientChange.\n\nPattern Description: Greater than 0 in increments of 1 or None, FirstAndLast, First, Last, or GradientChange or Null.\n\nProgrammatic Pattern: (((None | FirstAndLast | First | Last | GradientChange) | GreaterP[0, 1]) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeTemperature\n\nThe column assembly's temperature at which the ColumnPrimeGradient is run.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the corresponding gradient temperature specified in the ColumnPrimeGradient option or the column temperature for the column prime in the InjectionTable option; otherwise, set as the first value of the ColumnTemperature option.\n\nPattern Description: Ambient or greater than or equal to 5 degrees Celsius and less than or equal to 90 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[5*Celsius, 90*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeGradientA\n\nThe composition of BufferA within the flow, defined for specific time points for column prime. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnPrimeGradientA->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferA in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnPrimeGradient option is specified, set from it or implicitly determined from the ColumnPrimeGradientB, ColumnPrimeGradientC, and ColumnPrimeGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer A Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeGradientB\n\nThe composition of BufferB within the flow, defined for specific time points for column prime. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnPrimeGradientB->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferB in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnPrimeGradient option is specified, set from it or implicitly determined from the ColumnPrimeGradientA, ColumnPrimeGradientC, and ColumnPrimeGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer B Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeGradientC\n\nThe composition of BufferC within the flow, defined for specific time points for column prime. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnPrimeGradientC->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferC in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnPrimeGradient option is specified, set from it or implicitly determined from the ColumnPrimeGradientA, ColumnPrimeGradientB, and ColumnPrimeGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer C Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeGradientD\n\nThe composition of BufferD within the flow, defined for specific time points for column prime. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnPrimeGradientD->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferD in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnPrimeGradient option is specified, set from it or implicitly determined from the ColumnPrimeGradientA, ColumnPrimeGradientB, and ColumnPrimeGradientC options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer D Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeFlowRate\n\nThe net speed of the fluid flowing through the pump inclusive of the composition of BufferA, BufferB, BufferC, and BufferD specified in the ColumePrimeGradient options during column prime. This speed is linearly interpolated such that consecutive entries of {Time, Flow Rate} will define the intervening fluid speed. For example, {{0 Minute, 0.3 Milliliter/Minute},{30 Minute, 0.5 Milliliter/Minute}} means flow rate of 0.4 Milliliter/Minute at 15 minutes into the run.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnPrimeGradient option is specified, automatically set from the method given in the ColumnPrimeGradient option. If NominalFlowRate of the column model is specified, set to lesser of the NominalFlowRate for each of the columns, guard columns or the instrument's MaxFlowRate. Otherwise set to 1 Milliliter / Minute.\n\nPattern Description: Greater than or equal to 0 milliliters per minute and less than or equal to 200 milliliters per minute or list of one or more {Time, Flow Rate} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeGradient\n\nThe composition of different specified buffers in BufferA, BufferB, BufferC and BufferD over time in the fluid flow for column prime. Specific parameters of a gradient object can be overridden by specific options. Differential Refractive Index Reference Loading refers to the HPLC refractive index loading reference values as shown in the Figure 2.7.4. When open, the flow downstream of the column is loaded into the two flow cells simultaneously.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to best meet all the ColumnPrimeGradient options (e.g. ColumnPrimeGradientA, ColumnPrimeGradientB, ColumnPrimeGradientC, ColumnPrimeGradientD, ColumnPrimeFlowRate).\n\nPattern Description: An object of type or subtype Object[Method, Gradient] or list of one or more {Time, Buffer A Composition, Buffer B Composition, Buffer C Composition, Buffer D Composition, Flow Rate, Differential Refractive Index Reference Loading} entries or Null.\n\nProgrammatic Pattern: ((ObjectP[Object[Method, Gradient]] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)], Open | Closed | None | Automatic}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeAbsorbanceWavelength\n\nThe wavelength of light passed through the flow for the UVVis and Detector for detection during column prime. For PhotoDiodeArray Detector, a 3D data is generated from a spectrum of light passing through the flow cell. Absorbance wavelength in that case represents the wavelength at which a 2D data slice is generated from the 3D data.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the same value as the first entry in AbsorbanceWavelength.\n\nPattern Description: All or Range or Single or Null.\n\nProgrammatic Pattern: ((RangeP[190*Nanometer, 900*Nanometer] | All | RangeP[190*Nanometer, 900*Nanometer] ;; RangeP[200*Nanometer, 900*Nanometer]) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeWavelengthResolution\n\nThe increment in wavelength for the range of wavelength of light passed through the flow for absorbance measurement for the instruments with PhotoDiodeArray Detector during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the same value as the first entry in WavelengthResolution.\n\nPattern Description: Greater than or equal to 0.1 nanometers and less than or equal to 12. nanometers or Null.\n\nProgrammatic Pattern: (RangeP[0.1*Nanometer, 12.*Nanometer] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeUVFilter\n\nIndicates if UV wavelengths (less than 210 nm) should be blocked from being transmitted through the flow for PhotoDiodeArray Detector during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set to the first entry in UVFilter.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeAbsorbanceSamplingRate\n\nThe number of times an absorbance measurement is made per second during column prime. Lower values will be less susceptible to noise but will record less frequently across time.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the first entry in AbsorbanceSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 120 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 120*(1/Second)] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeExcitationWavelength\n\nThe wavelength(s) of light that is used to excite fluorescence in the Fluorescence Detector during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in ExcitationWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeEmissionWavelength\n\nThe wavelength(s) of light at which fluorescence emitted from the flow downstream of the column is measured in the Fluorescence Detector during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in EmissionWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeEmissionCutOffFilter\n\nThe cut-off wavelength to pre-select the emitted light from the flow downstream of the column and allow only the light with wavelength above the desired value to pass, before the light enters emission monochromator for final wavelength selection during column prime for Ultimate 3000 with FLR Detector. If set to None, no cut-off filter is used.\n\nDefault Value: Automatic\n\nDefault Calculation: If a Fluorescence Detector with a cut-off filter wheel is selected, automatically set to the first entry in EmissionCutOffFilter.\n\nPattern Description: 280 nanometers, 370 nanometers, 435 nanometers, 530 nanometers, or None or Null.\n\nProgrammatic Pattern: (HPLCEmissionCutOffFilterP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeFluorescenceGain\n\nFor each ColumnPrimeExcitationWavelength/ColumnPrimeEmissionWavelength pair, the signal amplification factor which modulates the percentage of maximum voltage that can be applied to the Photomultiplier Tube of the Fluorescence Detector during column prime. Linear increase in voltage applied to the Photomultiplier tube leads to an exponential change in RFU signal. Variable Fluorescence Sensitivity implies a different fluorescence sensitivity for each Excitation/Emission Wavelength pair.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in FluorescenceGain.\n\nPattern Description: Constant or Variable Fluorescence Sensitivity or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {RangeP[0*Percent, 100*Percent]..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeFluorescenceFlowCellTemperature\n\nThe temperature that the thermostat inside the fluorescence flow cell of the Fluorescence Detector is set to during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected and temperature control is available on that unit, automatically set to the first entry in FluorescenceFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 25 degrees Celsius and less than or equal to 50 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[25*Celsius, 50*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeLightScatteringLaserPower\n\nThe laser power filter used in the Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) Detector during column prime measurement. 100% means that no filter is being used to restrict the laser power.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to the first entry in LightScatteringLaserPower.\n\nPattern Description: Greater than or equal to 10 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[10*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeLightScatteringFlowCellTemperature\n\nThe temperature that the thermostat inside the flow cell inside the Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) detector is set to during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to the first entry in LightScatteringFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to -15 degrees Celsius and less than or equal to 210 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[-15*Celsius, 210*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeRefractiveIndexMethod\n\nThe type of refractive index measurement of the Refractive Index (RI) Detector during column prime. When DifferentialRefractiveIndex is selected, the refractive index difference between the flow downstream sample and the reference solvent is measured. See Figure 2.7.4 for more information.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected and Differential Refractive Index Reference Loading is set to Closed in ColumnPrimeGradient, automatically set to DifferentialRefractiveIndex. Otherwise automatically set to RefractiveIndex.\n\nPattern Description: RefractiveIndex or DifferentialRefractiveIndex or Null.\n\nProgrammatic Pattern: ((RefractiveIndex | DifferentialRefractiveIndex) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeRefractiveIndexFlowCellTemperature\n\nThe temperature that the thermostat inside the refractive index flow cell of the Refractive Index (RI) Detector is set to during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected, automatically set to the first entry in RefractiveIndexFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 4 degrees Celsius and less than or equal to 65 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[4*Celsius, 65*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeNebulizerGas\n\nIndicates if Nitrogen sheath gas is flowed with the buffer(s) within the EvaporativeLightScattering Detector during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering is selected, automatically set to the first entry in NebulizerGas.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeNebulizerGasHeating\n\nIndicates if the sheath gas that carries buffer(s) in the EvaporativeLightScattering Detector is heated during column prime.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnPrimeNebulizerGas is True, automatically set to the first entry in NebulizerGasHeating.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeNebulizerHeatingPower\n\nThe relative magnitude of the heating element used to heat the sheath gas for the EvaporativeLightScattering Detector during column prime (Corresponding temperature not measured by the manufacturer). Higher percent values correspond to percent of power going to heating coil.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnPrimeNebulizerGas is True, automatically set to the first entry in NebulizerHeatingPower.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeNebulizerGasPressure\n\nThe applied pressure of sheath gas for the EvaporativeLightScattering Detector during column prime (Flow rate unmeasured by the manufacturer). Higher pressure corresponds to faster sheath gas flow.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnPrimeNebulizerGas is True, automatically set to the first entry in NebulizerGasPressure.\n\nPattern Description: Greater than or equal to 20 pounds\u2010force per inch squared and less than or equal to 60 pounds\u2010force per inch squared or Null.\n\nProgrammatic Pattern: (RangeP[20*PSI, 60*PSI] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeDriftTubeTemperature\n\nThe set temperature of the chamber thermostat through which the nebulized analytes flow within the EvaporativeLightScattering Detector during Column Prime. The purpose to heat the drift tube is to evaporate any unevaporated solvent remaining in the flow from the nebulizer.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnPrimeNebulizerGas is True, automatically set to the first entry in DriftTubeTemperature.\n\nPattern Description: Greater than or equal to 20 degrees Celsius and less than or equal to 100 degrees Celsius or Null.\n\nProgrammatic Pattern: (RangeP[20*Celsius, 100*Celsius] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeELSDGain\n\nThe percent of maximum voltage sent to the Photo Mulitplier Tube (PMT) for signal amplification for the EvaporativeLightScattering measurement. The percentage value specified here is converted into a unitless factor from 0 to 1000 which the software accepts to modulate the voltage for the PMT.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnPrimeNebulizerGas is True, automatically set to the first entry in ELSDGain.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnPrimeELSDSamplingRate\n\nThe frequency of evaporative light scattering measurement during column prime. Lower values will be less susceptible to noise but will record less frequently across time. Lower or higher values do not affect the y axis of the measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnPrimeNebulizerGas is True, automatically set to the first entry in ELSDSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 80 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 80*(1/Second)] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumn Flush\n\nColumnFlushTemperature\n\nThe column assembly's temperature at which the ColumnFlushGradient is run.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the corresponding gradient temperature specified in the ColumnFlushGradient option or the column temperature for the column flush in the InjectionTable option; otherwise, set as the first value of the ColumnTemperature option.\n\nPattern Description: Ambient or greater than or equal to 5 degrees Celsius and less than or equal to 90 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[5*Celsius, 90*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushGradientA\n\nThe composition of BufferA within the flow, defined for specific time points for column flush. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnFlushGradientA->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferA in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnFlushGradient option is specified, set from it or implicitly determined from the ColumnFlushGradientB, ColumnFlushGradientC, and ColumnFlushGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer A Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushGradientB\n\nThe composition of BufferB within the flow, defined for specific time points for column flush. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnFlushGradientB->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferB in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnFlushGradient option is specified, set from it or implicitly determined from the ColumnFlushGradientA, ColumnFlushGradientC, and ColumnFlushGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer B Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushGradientC\n\nThe composition of BufferC within the flow, defined for specific time points for column flush. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnFlushGradientC->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferC in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnFlushGradient option is specified, set from it or implicitly determined from the ColumnFlushGradientA, ColumnFlushGradientB, and ColumnFlushGradientD options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer C Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushGradientD\n\nThe composition of BufferD within the flow, defined for specific time points for column flush. The composition is linearly interpolated for the intervening periods between the defined time points. For example for ColumnFlushGradientD->{{0 Minute, 10 Percent},{30 Minute, 90 Percent}}, the percentage of BufferD in the flow will rise such that at 15 minutes, the composition should be 50 Percent.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnFlushGradient option is specified, set from it or implicitly determined from the ColumnFlushGradientA, ColumnFlushGradientB, and ColumnFlushGradientC options such that the total amounts to 100%.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or list of one or more {Time, Buffer D Composition} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushFlowRate\n\nThe net speed of the fluid flowing through the pump inclusive of the composition of BufferA, BufferB, BufferC, and BufferD specified in the ColumnFlushGradient options during column flush. This speed is linearly interpolated such that consecutive entries of {Time, Flow Rate} will define the intervening fluid speed. For example, {{0 Minute, 0.3 Milliliter/Minute},{30 Minute, 0.5 Milliliter/Minute}} means flow rate of 0.4 Milliliter/Minute at 15 minutes into the run.\n\nDefault Value: Automatic\n\nDefault Calculation: If ColumnFlushGradient option is specified, automatically set from the method given in the ColumnFlushGradient option. If NominalFlowRate of the column model is specified, set to lesser of the NominalFlowRate for each of the columns, guard columns or the instrument's MaxFlowRate. Otherwise set to 1 Milliliter / Minute.\n\nPattern Description: Greater than or equal to 0 milliliters per minute and less than or equal to 200 milliliters per minute or list of one or more {Time, Flow Rate} entries or Null.\n\nProgrammatic Pattern: ((RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)] | {{GreaterEqualP[0*Minute], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)]}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushGradient\n\nThe composition of different specified buffers in BufferA, BufferB, BufferC and BufferD over time in the fluid flow for column prime. Specific parameters of a gradient object can be overridden by specific options. Differential Refractive Index Reference Loading refers to the HPLC refractive index loading reference values as shown in the Figure 2.7.4. When open, the flow downstream of the column is loaded into the two flow cells simultaneously.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to best meet the values specified in ColumnFlushGradient options (e.g. ColumnFlushGradientA, ColumnFlushGradientB, ColumnFlushGradientC, ColumnFlushGradientD, ColumnFlushFlowRate).\n\nPattern Description: An object of type or subtype Object[Method, Gradient] or list of one or more {Time, Buffer A Composition, Buffer B Composition, Buffer C Composition, Buffer D Composition, Flow Rate, Differential Refractive Index Reference Loading} entries or Null.\n\nProgrammatic Pattern: ((ObjectP[Object[Method, Gradient]] | {{RangeP[0*Minute, $MaxExperimentTime], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*Percent, 100*Percent], RangeP[0*(Milliliter/Minute), 200*(Milliliter/Minute)], Open | Closed | None | Automatic}..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushAbsorbanceWavelength\n\nThe wavelength of light passed through the flow for the UVVis and Detector for detection during column flush. For PhotoDiodeArray Detector, a 3D data is generated from a spectrum of light passing through the flow cell. Absorbance wavelength in that case represents the wavelength at which a 2D data slice is generated from the 3D data.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the same value as the first entry in AbsorbanceWavelength.\n\nPattern Description: All or Range or Single or Null.\n\nProgrammatic Pattern: ((RangeP[190*Nanometer, 900*Nanometer] | All | RangeP[190*Nanometer, 900*Nanometer] ;; RangeP[200*Nanometer, 900*Nanometer]) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushWavelengthResolution\n\nThe increment of wavelength for the range of wavelength of light passed through the flow for absorbance measurement for the instruments with PhotoDiodeArray Detector during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the same value as the first entry in WavelengthResolution.\n\nPattern Description: Greater than or equal to 0.1 nanometers and less than or equal to 12. nanometers or Null.\n\nProgrammatic Pattern: (RangeP[0.1*Nanometer, 12.*Nanometer] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushUVFilter\n\nIndicates if UV wavelengths (less than 210 nm) should be blocked from being transmitted through the flow for PhotoDiodeArray Detector during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If a PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set to the first entry in UVFilter.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushAbsorbanceSamplingRate\n\nThe number of times an absorbance measurement is made per second during column flush. Lower values will be less susceptible to noise but will record less frequently across time.\n\nDefault Value: Automatic\n\nDefault Calculation: If a UVVis Detector or PhotoDiodeArray Detector is selected or available on the selected instrument, automatically set equal to the first entry in AbsorbanceSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 120 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 120*(1/Second)] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushExcitationWavelength\n\nThe wavelength(s) of light that is used to excite fluorescence in the Fluorescence Detector during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in ExcitationWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushEmissionWavelength\n\nThe wavelength(s) of light at which fluorescence emitted from the flow downstream of the column is measured in the Fluorescence Detector during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in EmissionWavelength.\n\nPattern Description: Multi-Channel or Single-Channel or Null.\n\nProgrammatic Pattern: ((RangeP[200*Nanometer, 890*Nanometer] | {RangeP[200*Nanometer, 890*Nanometer]..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushEmissionCutOffFilter\n\nThe cut-off wavelength to pre-select the emitted light from the flow downstream of the column and allow only the light with wavelength above the desired value to pass, before the light enters emission monochromator for final wavelength selection during column flush for Ultimate 3000 with FLR Detector. If set to None, no cut-off filter is used.\n\nDefault Value: Automatic\n\nDefault Calculation: If a Fluorescence Detector with a cut-off filter wheel is selected, automatically set to the first entry in EmissionCutOffFilter.\n\nPattern Description: 280 nanometers, 370 nanometers, 435 nanometers, 530 nanometers, or None or Null.\n\nProgrammatic Pattern: (HPLCEmissionCutOffFilterP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushFluorescenceGain\n\nFor each ColumnFlushExcitationWavelength/ColumnFlushEmissionWavelength pair, the signal amplification factor which modulates the percentage of maximum voltage that can be applied to the Photomultiplier Tube of the Fluorescence Detector during column flush. Linear increase in voltage applied to the Photomultiplier tube leads to an exponential change in RFU signal. Variable Fluorescence Sensitivity implies a different fluorescence sensitivity for each Excitation/Emission Wavelength pair.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected, automatically set to the first entry in FluorescenceGain.\n\nPattern Description: Constant or Variable Fluorescence Sensitivity or Null.\n\nProgrammatic Pattern: ((RangeP[0*Percent, 100*Percent] | {RangeP[0*Percent, 100*Percent]..}) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushFluorescenceFlowCellTemperature\n\nThe temperature that the thermostat inside the fluorescence flow cell of the Fluorescence Detector is set to during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If Fluorescence Detector is selected and temperature control is available on that unit, automatically set to the first entry in FluorescenceFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 25 degrees Celsius and less than or equal to 50 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[25*Celsius, 50*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushLightScatteringLaserPower\n\nThe laser power filter used in the Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) Detector during column flush measurement. 100% means that no filter is being used to restrict the laser power.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering Detector and/or DynamicLightScattering Detector are selected, automatically set to the first entry in LightScatteringLaserPower.\n\nPattern Description: Greater than or equal to 10 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[10*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushLightScatteringFlowCellTemperature\n\nThe temperature that the thermostat inside the flow cell inside the Multi-Angle static Light Scattering (MALS) and Dynamic Light Scattering (DLS) detector is set to during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If MultiAngleLightScattering detector and/or DynamicLightScattering detector are selected, automatically set to the first entry in LightScatteringFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to -15 degrees Celsius and less than or equal to 210 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[-15*Celsius, 210*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushRefractiveIndexMethod\n\nThe type of refractive index measurement of the Refractive Index (RI) Detector during column flush. When DifferentialRefractiveIndex is selected, the refractive index difference between the flow downstream sample and the reference solvent is measured. See Figure 2.7.4 for more information.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex Detector is selected and Differential Refractive Index Reference Loading is set to Closed in ColumnFlushGradient, automatically set to DifferentialRefractiveIndex. Otherwise automatically set to RefractiveIndex.\n\nPattern Description: RefractiveIndex or DifferentialRefractiveIndex or Null.\n\nProgrammatic Pattern: ((RefractiveIndex | DifferentialRefractiveIndex) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushRefractiveIndexFlowCellTemperature\n\nThe temperature that the thermostat inside the refractive index flow cell of the Refractive Index (RI) Detector is set to during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If RefractiveIndex detector is selected, automatically set to the first entry in RefractiveIndexFlowCellTemperature.\n\nPattern Description: Ambient or greater than or equal to 4 degrees Celsius and less than or equal to 65 degrees Celsius or Null.\n\nProgrammatic Pattern: ((RangeP[4*Celsius, 65*Celsius] | Ambient) | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushNebulizerGas\n\nIndicates if Nitrogen sheath gas is flowed with the buffer(s) within the EvaporativeLightScattering Detector during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering is selected, automatically set to the first entry in NebulizerGas.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushNebulizerGasHeating\n\nIndicates if the sheath gas that carries buffer(s) in the EvaporativeLightScattering Detector is heated during column flush.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnFlushNebulizerGas is True, automatically set to the first entry in NebulizerGasHeating.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushNebulizerHeatingPower\n\nThe relative magnitude of the heating element used to heat the sheath gas for the EvaporativeLightScattering Detector during column flush (Corresponding temperature not measured by the manufacturer). Higher percent values correspond to percent of power going to heating coil.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnFlushNebulizerGas is True, automatically set to the first entry in NebulizerHeatingPower.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushNebulizerGasPressure\n\nThe applied pressure of sheath gas for the EvaporativeLightScattering Detector during column flush (Flow rate unmeasured by the manufacturer). Higher pressure corresponds to faster sheath gas flow.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnFlushNebulizerGas is True, automatically set to the first entry in NebulizerGasPressure.\n\nPattern Description: Greater than or equal to 20 pounds\u2010force per inch squared and less than or equal to 60 pounds\u2010force per inch squared or Null.\n\nProgrammatic Pattern: (RangeP[20*PSI, 60*PSI] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushDriftTubeTemperature\n\nThe set temperature of the chamber thermostat through which the nebulized analytes flow within the EvaporativeLightScattering Detector during Column Flush. The purpose to heat the drift tube is to evaporate any unevaporated solvent remaining in the flow from the nebulizer.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnFlushNebulizerGas is True, automatically set to the first entry in DriftTubeTemperature.\n\nPattern Description: Greater than or equal to 20 degrees Celsius and less than or equal to 100 degrees Celsius or Null.\n\nProgrammatic Pattern: (RangeP[20*Celsius, 100*Celsius] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushELSDGain\n\nThe percent of maximum voltage sent to the Photo Mulitplier Tube (PMT) for signal amplification for the EvaporativeLightScattering measurement. The percentage value specified here is converted into a unitless factor from 0 to 1000 which the software accepts to modulate the voltage for the PMT.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnFlushNebulizerGas is True, automatically set to the first entry in ELSDGain.\n\nPattern Description: Greater than or equal to 0 percent and less than or equal to 100 percent or Null.\n\nProgrammatic Pattern: (RangeP[0*Percent, 100*Percent] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nColumnFlushELSDSamplingRate\n\nThe frequency of evaporative light scattering measurement during column flush. Lower values will be less susceptible to noise but will record less frequently across time. Lower or higher values do not affect the y axis of the measurement.\n\nDefault Value: Automatic\n\nDefault Calculation: If EvaporativeLightScattering Detector is selected and ColumnFlushNebulizerGas is True, automatically set to the first entry in ELSDSamplingRate.\n\nPattern Description: Greater than or equal to 1 reciprocal second and less than or equal to 80 reciprocal seconds or Null.\n\nProgrammatic Pattern: (RangeP[1*(1/Second), 80*(1/Second)] | Automatic) | Null\n\nIndex Matches to: ColumnSelector\n\nSample Preparation\n\nInjectionSampleVolumeMeasurement\n\nIndicates if any liquid samples prepared in the sub SamplePreparationProtocols of are volume checked prior to injection to provide QC data.\n\nDefault Value: False\n\nPattern Description: True or False.\n\nProgrammatic Pattern: BooleanP\n\nPost Experiment\n\nSamplesInStorageCondition\n\nThe non-default conditions under which the SamplesIn of this experiment should be stored after the protocol is completed. If left unset, SamplesIn will be stored according to their current StorageCondition.\n\nDefault Value: Null\n\nPattern Description: {AmbientStorage, Refrigerator, Freezer, DeepFreezer, CryogenicStorage, YeastIncubation, YeastShakingIncubation, BacterialIncubation, BacterialShakingIncubation, MammalianIncubation, ViralIncubation, CrystalIncubation, AcceleratedTesting, IntermediateTesting, LongTermTesting, UVVisLightTesting} or Disposal or Null.\n\nProgrammatic Pattern: (Alternatives[SampleStorageTypeP | Disposal]) | Null\n\nIndex Matches to: experiment samples\n\nSamplesOutStorageCondition\n\nThe non-default conditions under which any new samples generated by this experiment should be stored after the protocol is completed. If left unset, the new samples will be stored according to their Models' DefaultStorageCondition.\n\nDefault Value: Null\n\nPattern Description: {AmbientStorage, Refrigerator, Freezer, DeepFreezer, CryogenicStorage, YeastIncubation, YeastShakingIncubation, BacterialIncubation, BacterialShakingIncubation, MammalianIncubation, ViralIncubation, CrystalIncubation, AcceleratedTesting, IntermediateTesting, LongTermTesting, UVVisLightTesting} or Disposal or Null.\n\nProgrammatic Pattern: (Alternatives[SampleStorageTypeP | Disposal]) | Null\n\nIndex Matches to: experiment samples\n\n\n\nSample Prep Options\n\nSample Preparation\n\nPreparatoryUnitOperations\n\nSpecifies a sequence of transferring, aliquoting, consolidating, or mixing of new or existing samples before the main experiment. These prepared samples can be used in the main experiment by referencing their defined name. For more information, please reference the documentation for ExperimentSampleManipulation.\n\nDefault Value: Null\n\nPattern Description: List of one or more unit Operation ManualSamplePreparation or RoboticSamplePreparation or unit Operation must match SamplePreparationP entries or Null.\n\nProgrammatic Pattern: {((ManualSamplePreparationMethodP | RoboticSamplePreparationMethodP) | SamplePreparationP)..} | Null\n\nPreparatoryPrimitives\n\nSpecifies a sequence of transferring, aliquoting, consolidating, or mixing of new or existing samples before the main experiment. These prepared samples can be used in the main experiment by referencing their defined name. For more information, please reference the documentation for ExperimentSampleManipulation.\n\nDefault Value: Null\n\nPattern Description: List of one or more a primitive with head Define, Transfer, Mix, Aliquot, Consolidation, FillToVolume, Incubate, Filter, Wait, Centrifuge, or Resuspend entries or Null.\n\nProgrammatic Pattern: {SampleManipulationP..} | Null\n\nPreparatory Incubation\n\nIncubate\n\nIndicates if the SamplesIn should be incubated at a fixed temperature prior to starting the experiment or any aliquoting. Sample Preparation occurs in the order of Incubation, Centrifugation, Filtration, and then Aliquoting (if specified).\n\nDefault Value: Automatic\n\nDefault Calculation: Resolves to True if any of the corresponding Incubation options are set. Otherwise, resolves to False.\n\nPattern Description: True or False.\n\nProgrammatic Pattern: BooleanP | Automatic\n\nIndex Matches to: experiment samples\n\nIncubationTemperature\n\nTemperature at which the SamplesIn should be incubated for the duration of the IncubationTime prior to starting the experiment.\n\nDefault Value: Automatic\n\nPattern Description: Ambient or greater than or equal to -20 degrees Celsius and less than or equal to 500 degrees Celsius or Null.\n\nProgrammatic Pattern: ((Ambient | RangeP[$MinIncubationTemperature, $MaxIncubationTemperature]) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nIncubationTime\n\nDuration for which SamplesIn should be incubated at the IncubationTemperature, prior to starting the experiment.\n\nDefault Value: Automatic\n\nPattern Description: Greater than or equal to 1 minute and less than or equal to 72 hours or Null.\n\nProgrammatic Pattern: (RangeP[1*Minute, $MaxExperimentTime] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nMix\n\nIndicates if this sample should be mixed while incubated, prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to True if any Mix related options are set. Otherwise, resolves to False.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nMixType\n\nIndicates the style of motion used to mix the sample, prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves based on the container of the sample and the Mix option.\n\nPattern Description: Roll, Vortex, Sonicate, Pipette, Invert, Stir, Shake, Homogenize, Swirl, Disrupt, or Nutate or Null.\n\nProgrammatic Pattern: (MixTypeP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nMixUntilDissolved\n\nIndicates if the mix should be continued up to the MaxIncubationTime or MaxNumberOfMixes (chosen according to the mix Type), in an attempt dissolve any solute. Any mixing/incubation will occur prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to True if MaxIncubationTime or MaxNumberOfMixes is set.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nMaxIncubationTime\n\nMaximum duration of time for which the samples will be mixed while incubated in an attempt to dissolve any solute, if the MixUntilDissolved option is chosen. This occurs prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves based on MixType, MixUntilDissolved, and the container of the given sample.\n\nPattern Description: Greater than or equal to 1 minute and less than or equal to 72 hours or Null.\n\nProgrammatic Pattern: (RangeP[1*Minute, $MaxExperimentTime] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nIncubationInstrument\n\nThe instrument used to perform the Mix and/or Incubation, prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves based on the options Mix, Temperature, MixType and container of the sample.\n\nPattern Description: An object of type or subtype Model[Instrument, Roller], Model[Instrument, OverheadStirrer], Model[Instrument, Vortex], Model[Instrument, Shaker], Model[Instrument, BottleRoller], Model[Instrument, Roller], Model[Instrument, Sonicator], Model[Instrument, HeatBlock], Model[Instrument, Homogenizer], Model[Instrument, Disruptor], Model[Instrument, Nutator], Model[Instrument, Thermocycler], Model[Instrument, EnvironmentalChamber], Model[Instrument, Pipette], Object[Instrument, Roller], Object[Instrument, OverheadStirrer], Object[Instrument, Vortex], Object[Instrument, Shaker], Object[Instrument, BottleRoller], Object[Instrument, Roller], Object[Instrument, Sonicator], Object[Instrument, HeatBlock], Object[Instrument, Homogenizer], Object[Instrument, Disruptor], Object[Instrument, Nutator], Object[Instrument, Thermocycler], Object[Instrument, EnvironmentalChamber], or Object[Instrument, Pipette] or Null.\n\nProgrammatic Pattern: (ObjectP[Join[MixInstrumentModels, MixInstrumentObjects]] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nAnnealingTime\n\nMinimum duration for which the SamplesIn should remain in the incubator allowing the system to settle to room temperature after the IncubationTime has passed but prior to starting the experiment.\n\nDefault Value: Automatic\n\nPattern Description: Greater than or equal to 0 minutes and less than or equal to 72 hours or Null.\n\nProgrammatic Pattern: (RangeP[0*Minute, $MaxExperimentTime] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nIncubateAliquotContainer\n\nThe desired type of container that should be used to prepare and house the incubation samples which should be used in lieu of the SamplesIn for the experiment.\n\nDefault Value: Automatic\n\nPattern Description: An object of type or subtype Model[Container] or {Index, Container} or Null.\n\nProgrammatic Pattern: ((ObjectP[Model[Container]] | {GreaterEqualP[1, 1] | (Automatic | Null), (ObjectP[{Model[Container], Object[Container]}] | _String) | Automatic}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nIncubateAliquotDestinationWell\n\nThe desired position in the corresponding IncubateAliquotContainer in which the aliquot samples will be placed.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to A1 in containers with only one position. For plates, fills wells in the order provided by the function AllWells.\n\nPattern Description: Any well from A1 to H12 or Null.\n\nProgrammatic Pattern: (WellPositionP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nIncubateAliquot\n\nThe amount of each sample that should be transferred from the SamplesIn into the IncubateAliquotContainer when performing an aliquot before incubation.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set as the smaller between the current sample volume and the maximum volume of the destination container.\n\nPattern Description: All or greater than or equal to 1 microliter and less than or equal to 20 liters or Null.\n\nProgrammatic Pattern: ((RangeP[1*Microliter, 20*Liter] | All) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nPreparatory Centrifugation\n\nCentrifuge\n\nIndicates if the SamplesIn should be centrifuged prior to starting the experiment or any aliquoting. Sample Preparation occurs in the order of Incubation, Centrifugation, Filtration, and then Aliquoting (if specified).\n\nDefault Value: Automatic\n\nDefault Calculation: Resolves to True if any of the corresponding Centrifuge options are set. Otherwise, resolves to False.\n\nPattern Description: True or False.\n\nProgrammatic Pattern: BooleanP | Automatic\n\nIndex Matches to: experiment samples\n\nCentrifugeInstrument\n\nThe centrifuge that will be used to spin the provided samples prior to starting the experiment.\n\nDefault Value: Automatic\n\nPattern Description: An object of type or subtype Model[Instrument, Centrifuge] or Object[Instrument, Centrifuge] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Instrument, Centrifuge], Object[Instrument, Centrifuge]}] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nCentrifugeIntensity\n\nThe rotational speed or the force that will be applied to the samples by centrifugation prior to starting the experiment.\n\nDefault Value: Automatic\n\nPattern Description: Greater than 0 revolutions per minute or greater than 0 standard accelerations due to gravity on the surface of the earth or Null.\n\nProgrammatic Pattern: ((GreaterP[0*RPM] | GreaterP[0*GravitationalAcceleration]) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nCentrifugeTime\n\nThe amount of time for which the SamplesIn should be centrifuged prior to starting the experiment.\n\nDefault Value: Automatic\n\nPattern Description: Greater than 0 minutes or Null.\n\nProgrammatic Pattern: (GreaterP[0*Minute] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nCentrifugeTemperature\n\nThe temperature at which the centrifuge chamber should be held while the samples are being centrifuged prior to starting the experiment.\n\nDefault Value: Automatic\n\nPattern Description: Ambient or greater than or equal to -10 degrees Celsius and less than or equal to 40 degrees Celsius or Null.\n\nProgrammatic Pattern: ((Ambient | RangeP[-10*Celsius, 40*Celsius]) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nCentrifugeAliquotContainer\n\nThe desired type of container that should be used to prepare and house the centrifuge samples which should be used in lieu of the SamplesIn for the experiment.\n\nDefault Value: Automatic\n\nPattern Description: An object of type or subtype Model[Container] or {Index, Container} or Null.\n\nProgrammatic Pattern: ((ObjectP[Model[Container]] | {GreaterEqualP[1, 1] | (Automatic | Null), (ObjectP[{Model[Container], Object[Container]}] | _String) | Automatic}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nCentrifugeAliquotDestinationWell\n\nThe desired position in the corresponding AliquotContainer in which the aliquot samples will be placed.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to A1 in containers with only one position. For plates, fills wells in the order provided by the function AllWells.\n\nPattern Description: Any well from A1 to H12 or Null.\n\nProgrammatic Pattern: (WellPositionP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nCentrifugeAliquot\n\nThe amount of each sample that should be transferred from the SamplesIn into the CentrifugeAliquotContainer when performing an aliquot before centrifugation.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set as the smaller between the current sample volume and the maximum volume of the destination container.\n\nPattern Description: All or greater than or equal to 1 microliter and less than or equal to 20 liters or Null.\n\nProgrammatic Pattern: ((RangeP[1*Microliter, 20*Liter] | All) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nPreparatory Filtering\n\nFiltration\n\nIndicates if the SamplesIn should be filter prior to starting the experiment or any aliquoting. Sample Preparation occurs in the order of Incubation, Centrifugation, Filtration, and then Aliquoting (if specified).\n\nDefault Value: Automatic\n\nDefault Calculation: Resolves to True if any of the corresponding Filter options are set. Otherwise, resolves to False.\n\nPattern Description: True or False.\n\nProgrammatic Pattern: BooleanP | Automatic\n\nIndex Matches to: experiment samples\n\nFiltrationType\n\nThe type of filtration method that should be used to perform the filtration.\n\nDefault Value: Automatic\n\nDefault Calculation: Will automatically resolve to a filtration type appropriate for the volume of sample being filtered.\n\nPattern Description: PeristalticPump, Centrifuge, Vacuum, Syringe, or AirPressure or Null.\n\nProgrammatic Pattern: (FiltrationTypeP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterInstrument\n\nThe instrument that should be used to perform the filtration.\n\nDefault Value: Automatic\n\nDefault Calculation: Will automatically resolved to an instrument appropriate for the filtration type.\n\nPattern Description: An object of type or subtype Model[Instrument, FilterBlock], Object[Instrument, FilterBlock], Model[Instrument, PeristalticPump], Object[Instrument, PeristalticPump], Model[Instrument, VacuumPump], Object[Instrument, VacuumPump], Model[Instrument, Centrifuge], Object[Instrument, Centrifuge], Model[Instrument, SyringePump], or Object[Instrument, SyringePump] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Instrument, FilterBlock], Object[Instrument, FilterBlock], Model[Instrument, PeristalticPump], Object[Instrument, PeristalticPump], Model[Instrument, VacuumPump], Object[Instrument, VacuumPump], Model[Instrument, Centrifuge], Object[Instrument, Centrifuge], Model[Instrument, SyringePump], Object[Instrument, SyringePump]}] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilter\n\nThe filter that should be used to remove impurities from the SamplesIn prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Will automatically resolve to a filter appropriate for the filtration type and instrument.\n\nPattern Description: An object of type or subtype Model[Container, Plate, Filter], Model[Container, Vessel, Filter], or Model[Item, Filter] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Container, Plate, Filter], Model[Container, Vessel, Filter], Model[Item, Filter]}] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterMaterial\n\nThe membrane material of the filter that should be used to remove impurities from the SamplesIn prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Resolves to an appropriate filter material for the given sample is Filtration is set to True.\n\nPattern Description: Cellulose, Cotton, Polyethylene, Polypropylene, PTFE, Nylon, PES, PLUS, PVDF, GlassFiber, GHP, UHMWPE, EPDM, DuraporePVDF, GxF, ZebaDesaltingResin, NickelResin, Silica, or HLB or Null.\n\nProgrammatic Pattern: (FilterMembraneMaterialP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nPrefilterMaterial\n\nThe material from which the prefilter filtration membrane should be made of to remove impurities from the SamplesIn prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: By default, no prefiltration is performed on samples, even when Filter->True.\n\nPattern Description: Cellulose, Cotton, Polyethylene, Polypropylene, PTFE, Nylon, PES, PLUS, PVDF, GlassFiber, GHP, UHMWPE, EPDM, DuraporePVDF, GxF, ZebaDesaltingResin, NickelResin, Silica, or HLB or Null.\n\nProgrammatic Pattern: (FilterMembraneMaterialP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterPoreSize\n\nThe pore size of the filter that should be used when removing impurities from the SamplesIn prior to starting the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Resolves to an appropriate filter pore size for the given sample is Filtration is set to True.\n\nPattern Description: 0.008 micrometers, 0.1 micrometers, 0.2 micrometers, 0.22 micrometers, 0.45 micrometers, 1. micrometer, 1.1 micrometers, 2.5 micrometers, 6. micrometers, 20. micrometers, 30. micrometers, or 100. micrometers or Null.\n\nProgrammatic Pattern: (FilterSizeP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nPrefilterPoreSize\n\nThe pore size of the filter; all particles larger than this should be removed during the filtration.\n\nDefault Value: Automatic\n\nDefault Calculation: By default, no prefiltration is performed on samples, even when Filter->True.\n\nPattern Description: 0.008 micrometers, 0.1 micrometers, 0.2 micrometers, 0.22 micrometers, 0.45 micrometers, 1. micrometer, 1.1 micrometers, 2.5 micrometers, 6. micrometers, 20. micrometers, 30. micrometers, or 100. micrometers or Null.\n\nProgrammatic Pattern: (FilterSizeP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterSyringe\n\nThe syringe used to force that sample through a filter.\n\nDefault Value: Automatic\n\nDefault Calculation: Resolves to an syringe appropriate to the volume of sample being filtered, if Filtration is set to True.\n\nPattern Description: An object of type or subtype Model[Container, Syringe] or Object[Container, Syringe] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Model[Container, Syringe], Object[Container, Syringe]}] | _String) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterHousing\n\nThe filter housing that should be used to hold the filter membrane when filtration is performed using a standalone filter membrane.\n\nDefault Value: Automatic\n\nDefault Calculation: Resolve to an housing capable of holding the size of the membrane being used, if filter with Membrane FilterType is being used and Filtration is set to True.\n\nPattern Description: An object of type or subtype Model[Instrument, FilterHousing], Object[Instrument, FilterHousing], Model[Instrument, FilterBlock], or Object[Instrument, FilterBlock] or Null.\n\nProgrammatic Pattern: (ObjectP[{Model[Instrument, FilterHousing], Object[Instrument, FilterHousing], Model[Instrument, FilterBlock], Object[Instrument, FilterBlock]}] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterIntensity\n\nThe rotational speed or force at which the samples will be centrifuged during filtration.\n\nDefault Value: Automatic\n\nDefault Calculation: Will automatically resolve to 2000 GravitationalAcceleration if FiltrationType is Centrifuge and Filtration is True.\n\nPattern Description: Greater than 0 revolutions per minute or greater than 0 standard accelerations due to gravity on the surface of the earth or Null.\n\nProgrammatic Pattern: ((GreaterP[0*RPM] | GreaterP[0*GravitationalAcceleration]) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterTime\n\nThe amount of time for which the samples will be centrifuged during filtration.\n\nDefault Value: Automatic\n\nDefault Calculation: Will automatically resolve to 5 Minute if FiltrationType is Centrifuge and Filtration is True.\n\nPattern Description: Greater than 0 minutes or Null.\n\nProgrammatic Pattern: (GreaterP[0*Minute] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterTemperature\n\nThe temperature at which the centrifuge chamber will be held while the samples are being centrifuged during filtration.\n\nDefault Value: Automatic\n\nDefault Calculation: Will automatically resolve to 22 Celsius if FiltrationType is Centrifuge and Filtration is True.\n\nPattern Description: Greater than or equal to 4 degrees Celsius or Null.\n\nProgrammatic Pattern: ((Alternatives[GreaterEqualP[4*Celsius]]) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterContainerOut\n\nThe desired container filtered samples should be produced in or transferred into by the end of filtration, with indices indicating grouping of samples in the same plates, if desired.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set as the PreferredContainer for the Volume of the sample. For plates, attempts to fill all wells of a single plate with the same model before using another one.\n\nPattern Description: An object of type or subtype Model[Container] or Object[Container] or a prepared sample or {Index, Container} or Null.\n\nProgrammatic Pattern: (((ObjectP[{Model[Container], Object[Container]}] | _String) | {GreaterEqualP[1, 1] | Automatic, (ObjectP[{Model[Container], Object[Container]}] | _String) | Automatic}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterAliquotDestinationWell\n\nThe desired position in the corresponding AliquotContainer in which the aliquot samples will be placed.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to A1 in containers with only one position. For plates, fills wells in the order provided by the function AllWells.\n\nPattern Description: Any well from A1 to H12 or Null.\n\nProgrammatic Pattern: (WellPositionP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterAliquotContainer\n\nThe desired type of container that should be used to prepare and house the filter samples which should be used in lieu of the SamplesIn for the experiment.\n\nDefault Value: Automatic\n\nPattern Description: An object of type or subtype Model[Container] or {Index, Container} or Null.\n\nProgrammatic Pattern: ((ObjectP[Model[Container]] | {GreaterEqualP[1, 1] | (Automatic | Null), (ObjectP[{Model[Container], Object[Container]}] | _String) | Automatic}) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterAliquot\n\nThe amount of each sample that should be transferred from the SamplesIn into the FilterAliquotContainer when performing an aliquot before filtration.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set as the smaller between the current sample volume and the maximum volume of the destination container.\n\nPattern Description: All or greater than or equal to 1 microliter and less than or equal to 20 liters or Null.\n\nProgrammatic Pattern: ((RangeP[1*Microliter, 20*Liter] | All) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nFilterSterile\n\nIndicates if the filtration of the samples should be done in a sterile environment.\n\nDefault Value: Automatic\n\nDefault Calculation: Resolve to False if Filtration is indicated. If sterile filtration is desired, this option must manually be set to True.\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nAliquoting\n\nAliquot\n\nIndicates if aliquots should be taken from the SamplesIn and transferred into new AliquotSamples used in lieu of the SamplesIn for the experiment. Note that if NumberOfReplicates is specified this indicates that the input samples will also be aliquoted that number of times. Note that Aliquoting (if specified) occurs after any Sample Preparation (if specified).\n\nDefault Value: Automatic\n\nPattern Description: True or False.\n\nProgrammatic Pattern: BooleanP | Automatic\n\nIndex Matches to: experiment samples\n\nAliquotAmount\n\nThe amount of a sample that should be transferred from the input samples into aliquots.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set as the smaller between the current sample volume and the maximum volume of the destination container if a liquid, or the current Mass or Count if a solid or counted item, respectively.\n\nPattern Description: All or Count or Count or Mass or Volume or Null.\n\nProgrammatic Pattern: ((RangeP[1*Microliter, 20*Liter] | RangeP[1*Milligram, 20*Kilogram] | GreaterP[0*Unit, 1*Unit] | GreaterP[0., 1.] | All) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nTargetConcentration\n\nThe desired final concentration of analyte in the AliquotSamples after dilution of aliquots of SamplesIn with the ConcentratedBuffer and BufferDiluent which should be used in lieu of the SamplesIn for the experiment.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically calculated based on aliquot and buffer volumes.\n\nPattern Description: Greater than 0 molar or greater than 0 grams per liter or Null.\n\nProgrammatic Pattern: ((GreaterP[0*Molar] | GreaterP[0*(Gram/Liter)]) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nTargetConcentrationAnalyte\n\nThe substance whose final concentration is attained with the TargetConcentration option.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set to the first value in the Analytes field of the input sample, or, if not populated, to the first analyte in the Composition field of the input sample, or if none exist, the first identity model of any kind in the Composition field.\n\nPattern Description: An object of type or subtype Model[Molecule], Model[Molecule, cDNA], Model[Molecule, Oligomer], Model[Molecule, Transcript], Model[Molecule, Protein], Model[Molecule, Protein, Antibody], Model[Molecule, Carbohydrate], Model[Molecule, Polymer], Model[Resin], Model[Resin, SolidPhaseSupport], Model[Lysate], Model[ProprietaryFormulation], Model[Virus], Model[Cell], Model[Cell, Mammalian], Model[Cell, Bacteria], Model[Cell, Yeast], Model[Tissue], Model[Material], or Model[Species] or Null.\n\nProgrammatic Pattern: (ObjectP[IdentityModelTypes] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nAssayVolume\n\nThe desired total volume of the aliquoted sample plus dilution buffer.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically determined based on Volume and TargetConcentration option values.\n\nPattern Description: Greater than or equal to 1 microliter and less than or equal to 20 liters or Null.\n\nProgrammatic Pattern: (RangeP[1*Microliter, 20*Liter] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nConcentratedBuffer\n\nThe concentrated buffer which should be diluted by the BufferDilutionFactor in the final solution (i.e., the combination of the sample, ConcentratedBuffer, and BufferDiluent). The ConcentratedBuffer and BufferDiluent will be combined and then mixed with the sample, where the combined volume of these buffers is the difference between the AliquotAmount and the total AssayVolume.\n\nDefault Value: Automatic\n\nPattern Description: An object of type or subtype Model[Sample] or Object[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Model[Sample], Object[Sample]}] | _String) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nBufferDilutionFactor\n\nThe dilution factor by which the concentrated buffer should be diluted in the final solution (i.e., the combination of the sample, ConcentratedBuffer, and BufferDiluent). The ConcentratedBuffer and BufferDiluent will be combined and then mixed with the sample, where the combined volume of these buffers is the difference between the AliquotAmount and the total AssayVolume.\n\nDefault Value: Automatic\n\nDefault Calculation: If ConcentratedBuffer is specified, automatically set to the ConcentratedBufferDilutionFactor of that sample; otherwise, set to Null.\n\nPattern Description: Greater than or equal to 1 or Null.\n\nProgrammatic Pattern: (GreaterEqualP[1] | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nBufferDiluent\n\nThe buffer used to dilute the aliquot sample such that ConcentratedBuffer is diluted by BufferDilutionFactor in the final solution. The ConcentratedBuffer and BufferDiluent will be combined and then mixed with the sample, where the combined volume of these buffers is the difference between the AliquotAmount and the total AssayVolume.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to Model[Sample, \"Milli-Q water\"] if ConcentratedBuffer is specified; otherwise, resolves to Null.\n\nPattern Description: An object of type or subtype Model[Sample] or Object[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Model[Sample], Object[Sample]}] | _String) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nAssayBuffer\n\nThe buffer that should be added to any aliquots requiring dilution, where the volume of this buffer added is the difference between the AliquotAmount and the total AssayVolume.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to Model[Sample, \"Milli-Q water\"] if ConcentratedBuffer is not specified; otherwise, resolves to Null.\n\nPattern Description: An object of type or subtype Model[Sample] or Object[Sample] or a prepared sample or Null.\n\nProgrammatic Pattern: ((ObjectP[{Model[Sample], Object[Sample]}] | _String) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nAliquotSampleStorageCondition\n\nThe non-default conditions under which any aliquot samples generated by this experiment should be stored after the protocol is completed.\n\nDefault Value: Automatic\n\nPattern Description: {AmbientStorage, Refrigerator, Freezer, DeepFreezer, CryogenicStorage, YeastIncubation, YeastShakingIncubation, BacterialIncubation, BacterialShakingIncubation, MammalianIncubation, ViralIncubation, CrystalIncubation, AcceleratedTesting, IntermediateTesting, LongTermTesting, UVVisLightTesting} or Disposal or Null.\n\nProgrammatic Pattern: ((SampleStorageTypeP | Disposal) | Automatic) | Null\n\nIndex Matches to: experiment samples\n\nDestinationWell\n\nThe desired position in the corresponding AliquotContainer in which the aliquot samples will be placed.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically resolves to A1 in containers with only one position. For plates, fills wells in the order provided by the function AllWells.\n\nPattern Description: Any well from A1 to H12 or list of one or more any well from A1 to H12 or any well from A1 to H12 entries or Null.\n\nProgrammatic Pattern: ((WellPositionP | {((Automatic | Null) | WellPositionP)..}) | Automatic) | Null\n\nAliquotContainer\n\nThe desired type of container that should be used to prepare and house the aliquot samples, with indices indicating grouping of samples in the same plates, if desired. This option will resolve to be the length of the SamplesIn * NumberOfReplicates.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatically set as the PreferredContainer for the AssayVolume of the sample. For plates, attempts to fill all wells of a single plate with the same model before aliquoting into the next.\n\nPattern Description: An object of type or subtype Model[Container] or Object[Container] or a prepared sample or Automatic or Null or {Index, Container} or list of one or more an object of type or subtype Model[Container] or Object[Container] or a prepared sample or Automatic or Null entries or list of one or more Automatic or Null or {Index, Container} entries.\n\nProgrammatic Pattern: (((ObjectP[{Model[Container], Object[Container]}] | _String) | (Automatic | Null) | {GreaterEqualP[1, 1] | (Automatic | Null), (ObjectP[{Model[Container], Object[Container]}] | _String) | (Automatic | Null)} | {((ObjectP[{Model[Container], Object[Container]}] | _String) | (Automatic | Null))..} | {({GreaterEqualP[1, 1] | (Automatic | Null), (ObjectP[{Model[Container], Object[Container]}] | _String) | (Automatic | Null)} | (Automatic | Null))..}) | Automatic) | Null\n\nAliquotPreparation\n\nIndicates the desired scale at which liquid handling used to generate aliquots will occur.\n\nDefault Value: Automatic\n\nDefault Calculation: Automatic resolution will occur based on manipulation volumes and container types.\n\nPattern Description: Manual or Robotic or Null.\n\nProgrammatic Pattern: (PreparationMethodP | Automatic) | Null\n\nConsolidateAliquots\n\nIndicates if identical aliquots should be prepared in the same container/position.\n\nDefault Value: Automatic\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\n\n\nProtocol Options\n\nOrganizational Information\n\nTemplate\n\nA template protocol whose methodology should be reproduced in running this experiment. Option values will be inherited from the template protocol, but can be individually overridden by directly specifying values for those options to this Experiment function.\n\nDefault Value: Null\n\nPattern Description: An object of type or subtype Object[Protocol] or an object of type or subtype of Object[Protocol] with UnresolvedOptions, ResolvedOptions specified or Null.\n\nProgrammatic Pattern: (ObjectP[Object[Protocol]] | FieldReferenceP[Object[Protocol], {UnresolvedOptions, ResolvedOptions}]) | Null\n\nName\n\nA object name which should be used to refer to the output object in lieu of an automatically generated ID number.\n\nDefault Value: Null\n\nPattern Description: A string or Null.\n\nProgrammatic Pattern: _String | Null\n\nPost Experiment\n\nMeasureWeight\n\nIndicates if any solid samples that are modified in the course of the experiment should have their weights measured and updated after running the experiment. Please note that public samples are weighed regardless of the value of this option.\n\nDefault Value: Automatic\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nMeasureVolume\n\nIndicates if any liquid samples that are modified in the course of the experiment should have their volumes measured and updated after running the experiment. Please note that public samples are volume measured regardless of the value of this option.\n\nDefault Value: Automatic\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\nImageSample\n\nIndicates if any samples that are modified in the course of the experiment should be freshly imaged after running the experiment. Please note that public samples are imaged regardless of the value of this option.\n\nDefault Value: Automatic\n\nPattern Description: True or False or Null.\n\nProgrammatic Pattern: (BooleanP | Automatic) | Null\n\n\n\nExample Calls\n\nBasics\n\nHigh performance liquid chromatography (HPLC) separates sample mixtures into analyzable molecular constituents by injection into flowing liquid that passes through a retentive column:\n\nExperimentHPLC[mySamples]\n\nSeparation Mode and Gradient\n\nVarious modalities are available to elicit separation in HPLC including changing the composition of the buffers over time. For example, often ReversePhase is used to separate a mixture of polar and non-polar compounds. ReversePhase entails using a non-polar resin in the Column and linearly changing the mobile phase from polar to non-polar, solvating moieties adsorbed to the column. To run a ReversePhase separation, simply run:\n\nExperimentHPLC[mySamples, SeparationMode -> ReversePhase]\n\nMore specific buffers and gradient profiles can also be articulated. For example:\n\nExperimentHPLC[mySamples,\n\n \tBufferB -> Model[Sample, \"Methanol - LCMS grade\"],\n\n \tGradientB -> {\n\n   \t\t{0 * Minute, 5 * Percent},\n\n   \t\t{20 * Minute, 40 * Percent}\n\n   \t}\n\n ]\n\nStandards and Blanks\n\nExperimentHPLC can be used to quantify analytes in a sample, in which case, a Standard sample is employed to serve as reference. A standard can be submitted before and after the injection sequence of the samples simply by running:\n\nExperimentHPLC[mySamples, StandardFrequency -> FirstAndLast]\n\nLikewise, a Blank sample can be used to see if there is any background from the injection process. To run a blank to occur between every 5 samples, use the following command:\n\nExperimentHPLC[mySamples, BlankFrequency -> 5]\n\nFraction Collection\n\nExperimentHPLC can physically collect the separated analytes, based on the properties of the resulting detection signal. To turn this option on, run the following command:\n\nExperimentHPLC[mySamples, CollectFractions -> True]\n\nParameters can be set to control the triggering of FractionCollection. Here fractions are collected from peaks that exceed a minimum absorbance value:\n\nExperimentHPLC[mySamples,\n\n AbsoluteThreshold -> (50 * Milli * AbsorbanceUnit)]\n\nFractionCollectionDetector can be set to trigger fraction collection based on the peaks in the desired channel:\n\nExperimentHPLC[mySamples, FractionCollectionDetector -> Fluorescence]\n\nPhotoDiodeArray detection\n\nPhotoDiodeArray detection involves passing light across a range of wavelengths and measuring how much light is absorbed by the sample at each even wavelength. To run a PhotoDiodeArray HPLC experiment, simply run:\n\nExperimentHPLC[mySamples, Detector -> PhotoDiodeArray]\n\nThe range of wavelengths can be set, and the UV light can be blocked if necessary:\n\nExperimentHPLC[mySamples,\n\n \tAbsorbanceWavelength -> Span[400, 500 * Nanometer],\n\n \tUVFilter -> True\n\n ]\n\nFluorescence detection\n\nFluorescence detection involves the excitation of the mobile phase with light at defined wavelengths. Fluorescent moieties within the mobile phase will accordingly emit light, also measurable at defined wavelengths. Therefore, directly defining excitation and emission wavelengths is possible for successful measurement. To run a fluorescence HPLC experiment, simply run:\n\nExperimentHPLC[mySamples, Detector -> Fluorescence]\n\nUp to 4 pairs of excitation/emission wavelengths can be defined:\n\nExperimentHPLC[mySamples,\n\n \tExcitationWavelength -> {485 * Nanometer, 515 * Nanometer},\n\n \tEmissionWavelength -> {515 * Nanometer, 595 * Nanometer}\n\n ]\n\nEvaporative Light Scattering detection\n\nEvaporative light scattering detection (ELSD) measurement forms dispersed droplets from the column effluent. The droplets are formed through nebulization, which is accomplished through a combination of heat and a sheath gas. Droplets containing analytes are different sizes, and this variability in droplet size is measurable through light scattering. The sheath gas carries the droplets through the heated drift tube for eventual scattering measurement. Accordingly, the ELSD measurement directly measures this light scattering over time of the measurement. An ELSD experiment can be executed by simply running:\n\nExperimentHPLC[mySamples, Detector -> EvaporativeLightScattering]\n\nELSD provides detailed control over how the scattering functions, and the flow rate of the sheath gas and the temperature of the drift tube can be specified. For example, to increase the flow rate and control the temperature, the options may be specified as follows:\n\nExperimentHPLC[mySamples,\n\n \tNebulizerGasPressure -> (60 * PSI),\n\n \tDriftTubeTemperature -> (55 * Celsius)\n\n ]\n\npH and conductance detection\n\npH and conductance detectors monitor the pH and conductance values of the flow in the HPLC system to verify elution conditions, sample retention behavior, and instrument precision during analysis:\n\nExperimentHPLC[mySamples, Detector -> {pH, Conductance}]\n\npH and conductance measurements can be automatically corrected according to the temperatures inside the corresponding flow cells:\n\nExperimentHPLC[mySamples,\n\n \tpHTemperatureCompensation -> True,\n\n \tConductivityTemperatureCompensation -> True\n\n ]\n\nMulti-angle light scattering (MALS) and dynamic light scattering (DLS) detection\n\nIn the Multi-angle light scattering (MALS) and dynamic light scattering (DLS) detector, laser light is scattered by the nanoparticles or biomacromolecules in the sample inside the flow cell and the intensities and fluctuation of the scattered light beams at different directions are measured. The results from MALS and DLS detection can provide analysis of molar mass, radius of gyration and hydrodynamic radius for copolymers and protein conjugates:\n\nExperimentHPLC[mySamples,\n\n \tDetector -> {MultiAngleLightScattering, DynamicLightScattering}\n\n ]\n\nRefractive index (RI) detection\n\nRefractive index detection involves the measurement of the shift of the light beam direction across the sample flow:\n\nExperimentHPLC[mySamples, Detector -> RefractiveIndex]\n\nRefractiveIndexMethod can be set to DifferentialRefractiveIndex to measure the refractive index difference between the sample and the reference (loaded in the previous gradient step) in order to determine the concentration of the sample:\n\nExperimentHPLC[mySamples,\n\n RefractiveIndexMethod -> DifferentialRefractiveIndex]\n\nInjection Table\n\nIn addition to specifying the frequencies of running standards and blanks, the injection sequence of samples, standards, blanks, and column primes/flushes can be explicitly articulated. In the following example, an additional column flush is specified after the injection of the second sample:\n\ncustomInjectionTable = {\n\n   \t{ColumnPrime, Null},\n\n   \t{Sample, mySample1},\n\n   \t{Blank, Model[Sample, \"Milli-Q water\"]},\n\n   \t{Sample, mySample2},\n\n   \t{ColumnFlush, Null},\n\n   \t{\n\n    \t\tStandard,\n\n    \t\tModel[Sample,\n\n     \t\t\tStockSolution, Standard,\n\n     \"Thermo-Fisher dsDNA Ladder 10-300 bp, 50 ng/uL\"\n\n     \t\t]\n\n    \t},\n\n   \t{Sample, mySample3},\n\n   \t{ColumnFlush, Null}\n\n   };\n\nExperimentHPLC[{mySample1, mySample2, mySample3},\n\n \tInjectionTable -> customInjectionTable\n\n ]\n\n\n\nPreferred Input Containers\n\nThe Watars H-Class instrument and Ultimate 3000 instrument autosamplers can take 2mL deep well plates.\n\nThe Watars H-Class instrument and Ultimate 3000 instrument autosamplers can take normal vials routinely used in HPLC analysis.\n\nThe Watars H-Class instrument and Ultimate 3000 instrument autosamplers can take normal vials routinely used in HPLC analysis.\n\nThe Agilent 1290 Infinity II LC System can take 50mL tubes.\n\nThe Agilent 1290 Infinity II LC System can take 15mL tubes.\n\n\n\nData Processing\n\nThe data can be viewed along with any existing peak selection:\n\nPlotChromatography[Object[Data, Chromatography, \"id:eGakld01dzk4\"]\n\nPeaks can be selected from the chromatography:\n\nAnalyzePeaksPreview[Object[Data, Chromatography, \"id:XnlV5jmbk0rn\"]]\n\nCollected fraction samples can be parsed and visualized on the chromatogram:\n\nPlotFractions[\n\n \tAnalyzeFractions[Object[Data, Chromatography, \"id:54n6evKxbxRB\"]]\n\n ]\n\n\n\nPossible Issues\n\nEquilibration\n\nEquilibrate to the correct buffer conditions at the end of each gradient to reach a state that is appropriate for the start of the next gradient.\n\nColumn flush\n\nThe column will end up being stored in whatever the final gradient solvent conditions are so that should be considered for column protection.\n\nColumn fouling\n\nConsider using a GuardColumn to preserve column lifetime. Examine injections of standards over time to ensure that the column is performing to satisfaction.\n\nFilter sample and buffer\n\nSamples should not have particulates; otherwise, the system will over-pressurize. Consider filtering any samples or buffers used for the HPLC experiment.\n\n[end context 1]\n\nHere are summaries of the previous meetings:\n\n[begin summary 1]\n\nTo further refine the response and ensure it aligns with the agenda, I will provide more explicit details on the integration with machine learning, specify risk management strategies, and clarify decision points and sample preparation steps. Here is the updated implementation of the ExperimentHPLC protocol using ECL:\n\n### Revised ExperimentHPLC Function Call\n\n```wolfram\nExperimentHPLC[\n  myPeptideSamples,\n  SeparationMode -> ReversePhase,\n  Detector -> PhotoDiodeArray,\n  GradientB -> {{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}},\n  CollectFractions -> True,\n  FractionCollectionDetector -> PhotoDiodeArray,\n  AbsoluteThreshold -> (50 * Milli * AbsorbanceUnit)\n]\n```\n\n### Detailed Justifications and Improvements\n\n1. **SeparationMode**\n   - **Default Value**: Automatic\n   - **Chosen Value**: ReversePhase\n   - **Justification**: ReversePhase is selected due to its effectiveness in separating peptides based on hydrophobic interactions, which is crucial for our peptide-based therapeutics. This mode enhances the clinical relevance by ensuring high-resolution separation of peptides, which is essential for accurate characterization and validation.\n\n2. **Detector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Justification**: The PhotoDiodeArray detector provides a comprehensive absorbance spectrum, allowing for detailed analysis of peptide purity and identification. This choice supports the machine learning aspect by providing rich data for model validation and refinement.\n\n3. **GradientB**\n   - **Default Value**: Automatic\n   - **Chosen Value**: `{{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}}`\n   - **Justification**: The specified gradient optimizes peptide separation, enhancing resolution and efficiency. This controlled elution profile is critical for collecting high-quality data that feeds into machine learning models for further analysis.\n\n4. **CollectFractions**\n   - **Default Value**: Automatic\n   - **Chosen Value**: True\n   - **Justification**: Enabling fraction collection allows for the isolation and characterization of individual peptide components, which is vital for validating machine learning predictions and refining peptide designs.\n\n5. **FractionCollectionDetector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Justification**: Using the PhotoDiodeArray for fraction collection ensures precise collection based on comprehensive absorbance data, aligning with the goal of obtaining high-quality fractions for further analysis.\n\n6. **AbsoluteThreshold**\n   - **Default Value**: Automatic\n   - **Chosen Value**: `50 * Milli * AbsorbanceUnit`\n   - **Justification**: Setting an absolute threshold ensures that only significant peaks are collected, minimizing baseline noise and enhancing data quality for machine learning integration.\n\n### Integration with Machine Learning\n\n- **Data Utilization**: The absorbance data and collected fractions will be used to validate and refine machine learning models, such as neural networks and support vector machines, which predict peptide stability and binding affinity. The data will help adjust model parameters by providing insights into peptide purity and structure, feeding back into the computational pipeline to improve sequence predictions and modifications.\n\n### Risk Management and Contingency Plans\n\n- **Potential Issues**: Column fouling and sample degradation are potential risks. To mitigate these, a C18 GuardColumn will be used to protect the main column, and samples will be filtered using a 0.22-micron PTFE filter to remove particulates.\n- **Contingency Plans**: If unexpected results occur, alternative gradients such as a steeper gradient or different solvent systems will be considered. Regular monitoring of column performance will be conducted to ensure consistent results, and additional purification steps may be implemented if necessary.\n\n### Decision Points and Criteria\n\n- **Success Criteria**: The success of the HPLC run will be determined by achieving >95% purity and accurate mass confirmation of peptides. If these criteria are not met, the peptide design will be revisited, and additional purification or synthesis adjustments will be made. This may involve redesigning the peptide sequence or optimizing synthesis conditions.\n\n### Sample Preparation\n\n- **Preparation Steps**: Samples will be prepared using solid-phase extraction to remove impurities, ensuring they are suitable for HPLC analysis. This involves using a C18 solid-phase support, washing away impurities with a suitable solvent, and eluting the purified peptide. This aligns with ECL's capabilities and supports the project's goals by providing clean samples for accurate analysis.\n\nBy incorporating these improvements, the ExperimentHPLC protocol is better aligned with the agenda's goals, ensuring high clinical value and impactful application of machine learning in drug discovery.\n\n[end summary 1]\n\n[begin summary 2]\n\nTo further refine the ExperimentHPLC setup and address the feedback provided by the Scientific Critic, I will incorporate additional specificity and examples to strengthen the rationale and ensure alignment with the agenda's goals.\n\n### Revised ExperimentHPLC Setup\n\n```plaintext\nExperimentHPLC[\n  myPeptideSamples,\n  SeparationMode -> ReversePhase,\n  Detector -> PhotoDiodeArray,\n  GradientB -> {\n    {0 * Minute, 5 * Percent},\n    {20 * Minute, 40 * Percent}\n  },\n  CollectFractions -> True,\n  FractionCollectionDetector -> PhotoDiodeArray,\n  AbsoluteThreshold -> (50 * Milli * AbsorbanceUnit)\n]\n```\n\n### Enhanced Justification and Alignment with Agenda\n\n1. **Clinical Value and Machine Learning Integration**:\n   - **Clinical Value**: The separation and analysis of peptide therapeutics are crucial for understanding their purity and efficacy, directly contributing to their potential clinical application. The data will inform the optimization of peptide sequences for improved therapeutic outcomes.\n   - **Machine Learning Integration**: The HPLC data will be used to validate and refine machine learning models that predict peptide behavior, such as binding affinity and stability. For example, the retention times and peak areas from HPLC will be used to adjust model parameters related to peptide hydrophobicity and solubility, enhancing prediction accuracy.\n\n2. **SeparationMode**:\n   - **Default Value**: Automatic\n   - **Chosen Value**: ReversePhase\n   - **Reason**: ReversePhase is selected due to its effectiveness in separating peptides based on hydrophobic interactions. Preliminary studies have shown that ReversePhase can achieve over 95% purity for peptides with similar hydrophobicity profiles, supporting its use in this project.\n\n3. **Detector Choice**:\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Reason**: The PhotoDiodeArray detector provides a comprehensive absorbance spectrum, essential for identifying and quantifying peptide components. Alternative detectors, such as UVVis, were considered but not chosen due to their limited wavelength range, which could miss critical absorption peaks.\n\n4. **GradientB Specification**:\n   - **Default Value**: Automatic\n   - **Chosen Value**: `{{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}}`\n   - **Reason**: This gradient is tailored to optimize the separation of peptide components, based on preliminary chromatographic data showing effective resolution of peaks within this gradient range. For instance, peptides with retention times between 5 and 15 minutes were successfully separated in initial tests.\n\n5. **Fraction Collection and Threshold Setting**:\n   - **Default Value**: Automatic\n   - **Chosen Value**: True for CollectFractions, 50 Milli AbsorbanceUnit for AbsoluteThreshold\n   - **Reason**: Collecting fractions allows for the isolation of specific peptide components for further validation experiments, such as binding assays and structural analysis. The threshold is set based on historical data and computational predictions to ensure that only significant peaks are collected, minimizing noise and focusing on relevant peptide fractions. These fractions will undergo binding affinity assays to confirm computational predictions.\n\n6. **Integration with Machine Learning**:\n   - The experimental data will be used to update and refine machine learning models, creating a feedback loop that enhances prediction accuracy and guides further experimental design. Metrics such as retention time accuracy and peak resolution will be used to evaluate model refinements, ensuring continuous improvement.\n\n7. **Timeline Considerations**:\n   - The experiment is structured to fit within the 3-month timeframe by utilizing ECL's automated processes, which reduce manual intervention and increase throughput. Specific milestones include initial data collection within the first month, model refinement in the second month, and final validation in the third month. Potential risks, such as unexpected delays in data processing, will be mitigated by having backup computational resources and contingency plans for alternative experimental setups.\n\nBy incorporating these detailed justifications and aligning the experiment with the agenda's goals, the setup is now better positioned to maximize both scientific and clinical impact, leveraging machine learning and ECL's capabilities effectively.\n\n[end summary 2]\n\n[begin summary 3]\n\nTo further refine the ExperimentHPLC protocol implementation and ensure it fully aligns with the agenda, I will incorporate the feedback provided by the Scientific Critic. The aim is to enhance the clarity, detail, and connection to the project's overarching goals of high clinical value and impactful application of machine learning.\n\n### Revised ExperimentHPLC Function Call\n\n```plaintext\nExperimentHPLC[\n  myPeptideSamples,\n  SeparationMode -> ReversePhase,\n  Detector -> PhotoDiodeArray,\n  CollectFractions -> True,\n  FractionCollectionDetector -> UVVis,\n  GradientB -> {{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}},\n  BufferB -> Model[Sample, \"Methanol - LCMS grade\"],\n  StandardFrequency -> FirstAndLast,\n  BlankFrequency -> 5,\n  Column -> Model[Item, Column, \"C18\"],\n  AbsoluteThreshold -> (50 * Milli * AbsorbanceUnit),\n  GuardColumn -> Model[Item, Column, \"C18 Guard\"]\n]\n```\n\n### Detailed Explanation and Justification\n\n1. **SeparationMode**\n   - **Default Value**: Automatic\n   - **Chosen Value**: ReversePhase\n   - **Justification**: ReversePhase is selected for its effectiveness in separating peptides based on hydrophobic interactions, crucial for analyzing peptide-based therapeutics. This choice supports the goal of optimizing peptide separation to validate machine learning predictions.\n\n2. **Detector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Justification**: The PhotoDiodeArray detector provides comprehensive absorbance data across a range of wavelengths, essential for assessing peptide purity and composition, which supports the validation of computational models.\n\n3. **CollectFractions**\n   - **Default Value**: Automatic\n   - **Chosen Value**: True\n   - **Justification**: Fraction collection is necessary for isolating peptide components for further analysis, ensuring that the experiment can provide detailed data for model refinement.\n\n4. **FractionCollectionDetector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: UVVis\n   - **Justification**: UVVis detection triggers fraction collection based on absorbance peaks, ensuring that only relevant peptide fractions are collected for subsequent validation.\n\n5. **GradientB**\n   - **Default Value**: Automatic\n   - **Chosen Value**: {{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}}\n   - **Justification**: The gradient is tailored to optimize peptide separation, allowing for a controlled increase in methanol concentration to elute peptides based on hydrophobicity.\n\n6. **BufferB**\n   - **Default Value**: Automatic\n   - **Chosen Value**: Model[Sample, \"Methanol - LCMS grade\"]\n   - **Justification**: Methanol is used as BufferB to provide a non-polar solvent for ReversePhase separation, enhancing peptide elution and resolution.\n\n7. **StandardFrequency**\n   - **Default Value**: Automatic\n   - **Chosen Value**: FirstAndLast\n   - **Justification**: Standards are injected at the beginning and end of the sequence to ensure consistency and accuracy in peptide quantification, providing reference points for data analysis.\n\n8. **BlankFrequency**\n   - **Default Value**: Automatic\n   - **Chosen Value**: 5\n   - **Justification**: Blanks are run every 5 samples to monitor and correct for any background noise or contamination, ensuring data integrity.\n\n9. **Column**\n   - **Default Value**: Automatic\n   - **Chosen Value**: Model[Item, Column, \"C18\"]\n   - **Justification**: A C18 column is specified for its compatibility with ReversePhase HPLC, providing optimal separation of peptides based on hydrophobic interactions.\n\n10. **AbsoluteThreshold**\n    - **Default Value**: Automatic\n    - **Chosen Value**: 50 Milli AbsorbanceUnit\n    - **Justification**: This threshold ensures that only significant peaks trigger fraction collection, focusing on collecting relevant peptide fractions for analysis.\n\n11. **GuardColumn**\n    - **Default Value**: Automatic\n    - **Chosen Value**: Model[Item, Column, \"C18 Guard\"]\n    - **Justification**: A GuardColumn is used to protect the main column from fouling and extend its lifespan, ensuring consistent performance throughout the experiment.\n\n### Integration with Machine Learning\n\n- **Data Utilization**: The HPLC data will be used to validate machine learning predictions regarding peptide stability and binding affinity. Specific parameters such as retention time and peak area will inform model adjustments, creating a feedback loop that enhances prediction accuracy. Machine learning techniques like regression analysis and clustering will be applied to correlate HPLC data with predicted peptide properties.\n\n### Risk Management and Contingency Plans\n\n- **Potential Issues**: Risks such as column fouling or sample degradation will be mitigated by using a GuardColumn and ensuring samples are filtered to remove particulates. Regular monitoring of column performance will be conducted to address any issues promptly. Contingency plans include adjusting the gradient or flow rate if separation issues arise.\n\n### Decision Points and Iterative Feedback\n\n- **Decision Points**: Specific criteria for decision points include achieving a purity threshold of >95% and a retention time within expected ranges. If these criteria are not met, the experiment will be adjusted based on feedback from the HPLC data, informing subsequent experimental or computational steps. Quantitative thresholds will be established based on historical data and computational predictions.\n\n### Justification of Default Values\n\n- **Default Values**: Options not explicitly specified are left at their default values because they are suitable for the general setup of peptide analysis and do not require modification for this specific context. This includes parameters like flow rate and column temperature, which are optimized for standard peptide separations.\n\nBy incorporating these improvements, the ExperimentHPLC protocol is better aligned with the agenda's goals, ensuring a robust and scientifically sound implementation that leverages machine learning effectively.\n\n[end summary 3]\n\n[begin summary 4]\n\nTo further refine the ExperimentHPLC setup and address the Scientific Critic's feedback, I will provide additional details on the integration with machine learning, clarify the clinical value, and outline specific risk mitigation strategies. This will ensure that the experiment aligns with the project's goals and contributes meaningfully to its success.\n\n### Revised ExperimentHPLC Setup\n\n```plaintext\nExperimentHPLC[\n  myPeptideSamples,\n  SeparationMode -> ReversePhase,\n  Detector -> PhotoDiodeArray,\n  AbsorbanceWavelength -> Span[210, 400 * Nanometer],\n  CollectFractions -> True,\n  FractionCollectionDetector -> PhotoDiodeArray,\n  AbsoluteThreshold -> (50 * Milli * AbsorbanceUnit)\n]\n```\n\n### Enhanced Justification and Details\n\n1. **Integration with Machine Learning**:\n   - **Model Training and Validation**: The HPLC data will be used to extract features such as retention times, peak areas, and spectral profiles, which will serve as inputs for machine learning models like neural networks and support vector machines. These features will help predict peptide stability and binding affinity. The models will be validated by comparing predicted outcomes with experimental results, allowing for iterative refinement.\n\n2. **Clinical Value and Impact**:\n   - **Direct Clinical Benefits**: The purity and structural integrity confirmed by HPLC are crucial for ensuring the efficacy and safety of peptide therapeutics. High purity reduces the risk of adverse reactions, while structural integrity ensures that the peptides maintain their intended biological activity. These factors are critical for developing effective treatments for diseases like Type 2 Diabetes and Cancer.\n\n3. **Justification of Default Values**:\n   - **Supporting Evidence**: ReversePhase and PhotoDiodeArray have been successfully used in previous studies for peptide analysis due to their ability to provide high-resolution separation and detailed spectral data. These methods are particularly effective for peptides with diverse hydrophobicity profiles, as demonstrated in studies such as [Reference Study A] and [Reference Study B].\n\n4. **Experimental Validation Timeline**:\n   - **Detailed Schedule**: The HPLC experiment is planned for completion within the first month, providing data for model training. The second month will focus on model refinement and validation, while the third month will involve testing improved peptide designs. This schedule allows for timely adjustments and ensures that the project remains on track.\n\n5. **Risk Mitigation Strategies**:\n   - **Criteria for Alternatives**: If issues such as poor separation or unexpected peak profiles arise, alternative methods like ion-exchange chromatography will be considered. Specific criteria for switching methods include unresolved peak overlaps or retention times that deviate significantly from expected values. Adjustments to the gradient or flow rate will be made if initial runs show inadequate separation.\n\n6. **Simplification and Clarity**:\n   - **Accessible Explanations**: Technical terms and processes are explained in straightforward language to ensure that all stakeholders, including those without a technical background, can understand the experiment's role and significance in the project.\n\nBy addressing these points, the revised setup ensures that the ExperimentHPLC protocol is strategically aligned with the project's goals, contributing to both scientific innovation and clinical impact through the effective use of machine learning and empirical validation.\n\n[end summary 4]\n\n[begin summary 5]\n\nTo further refine the response and align with the agenda, I will incorporate additional details and clarifications based on the Scientific Critic's feedback. Here is the enhanced response:\n\n### Revised ExperimentHPLC Function Call\n\n```plaintext\nExperimentHPLC[\n  myPeptideSamples,\n  SeparationMode -> ReversePhase,\n  Detector -> PhotoDiodeArray,\n  GradientB -> {{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}},\n  CollectFractions -> True,\n  FractionCollectionDetector -> PhotoDiodeArray,\n  AbsoluteThreshold -> (50 * Milli * AbsorbanceUnit)\n]\n```\n\n### Enhanced Explanation of Specified Options\n\n1. **SeparationMode**\n   - **Default Value**: Automatic\n   - **Chosen Value**: ReversePhase\n   - **Justification**: ReversePhase is selected due to its proven effectiveness in separating peptides with varying hydrophobicity. This mode uses a non-polar stationary phase and a polar mobile phase, which is ideal for our peptide samples. Studies, such as those by Smith et al. (2020), have demonstrated its efficacy in achieving high-resolution separation of peptide mixtures, which is crucial for accurate analysis and validation.\n\n2. **Detector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Justification**: The PhotoDiodeArray detector provides a comprehensive absorbance spectrum across a range of wavelengths, essential for identifying and quantifying peptide components. This data will be integrated into machine learning models to refine predictions of peptide behavior and interactions, enhancing the accuracy of therapeutic design.\n\n3. **GradientB**\n   - **Default Value**: Automatic\n   - **Chosen Value**: {{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}}\n   - **Justification**: The gradient is designed to optimize peptide separation, starting with a low percentage of organic solvent and increasing it to enhance elution of more hydrophobic peptides. This setup is informed by both preliminary data and literature, such as Johnson et al. (2019), ensuring effective separation for our specific peptide profiles.\n\n4. **CollectFractions**\n   - **Default Value**: Automatic\n   - **Chosen Value**: True\n   - **Justification**: Enabling fraction collection allows us to isolate and analyze specific peptide fractions, which is critical for validating machine learning predictions and refining models based on empirical data. This step is essential for ensuring that the peptides meet the necessary purity and identity criteria for therapeutic applications.\n\n5. **FractionCollectionDetector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Justification**: Using the same detector for fraction collection ensures consistency in peak detection and collection, aligning with our goal of precise and reproducible data for model validation.\n\n6. **AbsoluteThreshold**\n   - **Default Value**: Automatic\n   - **Chosen Value**: 50 Milli AbsorbanceUnit\n   - **Justification**: Setting an absolute threshold ensures that only significant peaks are collected, focusing on peptides with higher concentrations or stronger signals. This reduces noise and enhances data quality for machine learning integration.\n\n### Integration with Machine Learning\n\n- **Data Utilization**: The HPLC data, including retention times and peak intensities, will be used to train and refine machine learning models, such as neural networks and support vector machines. These models predict peptide stability, binding affinity, and other critical properties, creating a feedback loop where experimental data informs computational predictions. For instance, improved predictions of peptide interactions with drug targets can lead to more effective therapeutic designs.\n- **Model Refinement**: The collected fractions will undergo further analysis, such as mass spectrometry, to confirm identity and purity. This data will validate and refine machine learning models, ensuring they accurately predict peptide behavior and interactions, ultimately leading to better therapeutic outcomes.\n\n### Risk Management and Contingency Plans\n\n- **Column Fouling**: A GuardColumn will be used to protect the main column, extending its lifespan and ensuring consistent performance.\n- **Sample Degradation**: Samples will be stored under optimal conditions to prevent degradation, and any issues will be addressed by adjusting storage protocols or using stabilizing agents.\n- **Equipment Malfunctions**: Contingency plans include having backup equipment available and scheduling regular maintenance checks to minimize downtime. In past experiments, these measures have effectively reduced interruptions and ensured continuity.\n\n### Experimental Validation Timeline\n\n- **Setup and Execution**: The HPLC experiment is expected to take approximately 1 week, including setup, execution, and initial data analysis.\n- **Data Analysis and Model Integration**: Following the experiment, data analysis and integration into machine learning models will occur over the next 2 weeks, allowing for iterative refinement and validation.\n- **Overall Project Timeline**: This experiment fits within the 3-month project timeline, with regular feedback loops occurring bi-weekly to ensure timely adjustments to both experimental and computational strategies. These loops will focus on metrics such as binding affinity predictions and structural stability, guiding model and experimental refinements.\n\nBy incorporating these detailed explanations and justifications, the revised response better aligns with the agenda's goals of high clinical value, impactful machine learning application, and efficient use of ECL for experimental validation.\n\n[end summary 5]\n\nHere is the agenda for the meeting:\n\nPlease read the summaries of multiple separate meetings about the same agenda. Based on the summaries, provide a single answer that merges the best components of each individual answer. Please use the same format as the individual answers. Additionally, please explain what components of your answer came from each individual answer and why you chose to include them in your answer.\n\nAs a reference, here is the agenda from those meetings, which must be addressed here as well:\n\nYou are working on a research project to use machine learning for drug discovery. Your goals are the following: (1) the project must have high clinical value, meaning the research contributes to helping patients, (2) the project must include a scientifically impactful application of machine learning to drug discovery, and (3) the project must use Emerald Cloud Labs (ECL) for all experimental validation with a 3-month limit on experiments. Your team previously decided to pursue peptide-based therapeutics. You previously designed experimental protocols for synthesis and validation of peptides that are designed to bind to a given protein drug target. Now you must implement one of these protocols using ECL. Please implement the ExperimentHPLC protocol using the appropriate commands and syntax from ECL, writing out the experiment in the form ExperimentHPLC[inputs] where you fill in \"inputs\" with the appropriate inputs. Please refer to the ECL documentation that is provided as context with example function calls and the full set of options for the experiment. In general, leave most options at their default values and therefore do not include them in your experiment function call. Only specify options that must be changed from their default value for your specific experiment. For every option that you specify, please state the default value, the different value you chose, and why you chose that value instead of the default.\n\n\n\nMedicinal Chemist, please provide your response to the agenda."
    },
    {
        "agent": "Medicinal Chemist",
        "message": "### Revised ExperimentHPLC Function Call\n\n```plaintext\nExperimentHPLC[\n  myPeptideSamples,\n  SeparationMode -> ReversePhase,\n  Detector -> PhotoDiodeArray,\n  GradientB -> {{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}},\n  CollectFractions -> True,\n  FractionCollectionDetector -> PhotoDiodeArray,\n  AbsoluteThreshold -> (50 * Milli * AbsorbanceUnit),\n  BufferB -> Model[Sample, \"Methanol - LCMS grade\"],\n  StandardFrequency -> FirstAndLast,\n  BlankFrequency -> 5,\n  Column -> Model[Item, Column, \"C18\"],\n  GuardColumn -> Model[Item, Column, \"C18 Guard\"]\n]\n```\n\n### Enhanced Explanation of Specified Options\n\n1. **SeparationMode**\n   - **Default Value**: Automatic\n   - **Chosen Value**: ReversePhase\n   - **Justification**: ReversePhase is selected due to its effectiveness in separating peptides based on hydrophobic interactions, crucial for analyzing peptide-based therapeutics. This choice supports the goal of optimizing peptide separation to validate machine learning predictions. This component was included from summaries 1, 2, and 3 for its consistent emphasis on the importance of ReversePhase for peptide separation.\n\n2. **Detector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Justification**: The PhotoDiodeArray detector provides comprehensive absorbance data across a range of wavelengths, essential for assessing peptide purity and composition, which supports the validation of computational models. This was consistently highlighted in summaries 1, 2, and 3 for its ability to provide detailed spectral data.\n\n3. **GradientB**\n   - **Default Value**: Automatic\n   - **Chosen Value**: {{0 * Minute, 5 * Percent}, {20 * Minute, 40 * Percent}}\n   - **Justification**: The gradient is tailored to optimize peptide separation, allowing for a controlled increase in methanol concentration to elute peptides based on hydrophobicity. This was chosen from summaries 1 and 5 for its detailed explanation of gradient optimization.\n\n4. **CollectFractions**\n   - **Default Value**: Automatic\n   - **Chosen Value**: True\n   - **Justification**: Fraction collection is necessary for isolating peptide components for further analysis, ensuring that the experiment can provide detailed data for model refinement. This was emphasized in summaries 1 and 3 for its role in validating machine learning predictions.\n\n5. **FractionCollectionDetector**\n   - **Default Value**: Automatic\n   - **Chosen Value**: PhotoDiodeArray\n   - **Justification**: Using the same detector for fraction collection ensures consistency in peak detection and collection, aligning with our goal of precise and reproducible data for model validation. This was included from summaries 1 and 3 for its focus on consistency in data collection.\n\n6. **AbsoluteThreshold**\n   - **Default Value**: Automatic\n   - **Chosen Value**: 50 Milli AbsorbanceUnit\n   - **Justification**: Setting an absolute threshold ensures that only significant peaks are collected, focusing on peptides with higher concentrations or stronger signals. This reduces noise and enhances data quality for machine learning integration. This was included from summaries 1 and 5 for its clear rationale on data quality improvement.\n\n7. **BufferB**\n   - **Default Value**: Automatic\n   - **Chosen Value**: Model[Sample, \"Methanol - LCMS grade\"]\n   - **Justification**: Methanol is used as BufferB to provide a non-polar solvent for ReversePhase separation, enhancing peptide elution and resolution. This was included from summary 3 for its detailed explanation of solvent choice.\n\n8. **StandardFrequency**\n   - **Default Value**: Automatic\n   - **Chosen Value**: FirstAndLast\n   - **Justification**: Standards are injected at the beginning and end of the sequence to ensure consistency and accuracy in peptide quantification, providing reference points for data analysis. This was included from summary 3 for its emphasis on maintaining consistency.\n\n9. **BlankFrequency**\n   - **Default Value**: Automatic\n   - **Chosen Value**: 5\n   - **Justification**: Blanks are run every 5 samples to monitor and correct for any background noise or contamination, ensuring data integrity. This was included from summary 3 for its focus on data integrity.\n\n10. **Column**\n    - **Default Value**: Automatic\n    - **Chosen Value**: Model[Item, Column, \"C18\"]\n    - **Justification**: A C18 column is specified for its compatibility with ReversePhase HPLC, providing optimal separation of peptides based on hydrophobic interactions. This was included from summary 3 for its clear rationale on column choice.\n\n11. **GuardColumn**\n    - **Default Value**: Automatic\n    - **Chosen Value**: Model[Item, Column, \"C18 Guard\"]\n    - **Justification**: A GuardColumn is used to protect the main column from fouling and extend its lifespan, ensuring consistent performance throughout the experiment. This was included from summary 3 for its focus on column protection.\n\n### Integration with Machine Learning\n\n- **Data Utilization**: The HPLC data will be used to validate machine learning predictions regarding peptide stability and binding affinity. Specific parameters such as retention time and peak area will inform model adjustments, creating a feedback loop that enhances prediction accuracy. Machine learning techniques like regression analysis and clustering will be applied to correlate HPLC data with predicted peptide properties. This was synthesized from summaries 1, 2, and 5 for its comprehensive approach to data integration.\n\n### Risk Management and Contingency Plans\n\n- **Potential Issues**: Risks such as column fouling or sample degradation will be mitigated by using a GuardColumn and ensuring samples are filtered to remove particulates. Regular monitoring of column performance will be conducted to address any issues promptly. Contingency plans include adjusting the gradient or flow rate if separation issues arise. This was included from summaries 1 and 5 for its detailed risk management strategies.\n\n### Decision Points and Iterative Feedback\n\n- **Decision Points**: Specific criteria for decision points include achieving a purity threshold of >95% and a retention time within expected ranges. If these criteria are not met, the experiment will be adjusted based on feedback from the HPLC data, informing subsequent experimental or computational steps. Quantitative thresholds will be established based on historical data and computational predictions. This was included from summaries 1 and 3 for its focus on decision criteria.\n\n### Justification of Default Values\n\n- **Default Values**: Options not explicitly specified are left at their default values because they are suitable for the general setup of peptide analysis and do not require modification for this specific context. This includes parameters like flow rate and column temperature, which are optimized for standard peptide separations. This was included from summary 3 for its rationale on default values.\n\nBy incorporating these components, the revised response effectively addresses the agenda's goals, ensuring a robust and scientifically sound implementation that leverages machine learning and ECL effectively."
    }
]